[
  {
    "objectID": "pannotator_examples.html",
    "href": "pannotator_examples.html",
    "title": "pannotator examples",
    "section": "",
    "text": "This code loads in the libraries needed.\n\n\nShow the code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(mapview)\nlibrary(RColorBrewer)\nlibrary(rcompanion)\nlibrary(sf)\nlibrary(stringr)\nlibrary(webshot)\n\n\n\n\n\nThis code reads in the .Rds files containing species, spinifex cover and tree crown data.\n\n\nShow the code\n# Read in the .Rds files containing species, spinifex cover and tree crown data\n\n# If you have exported an .Rds file from PannotatoR\ndf_species &lt;- readRDS(\"Data_files/df_species.Rds\")\n\n# If you have exported an .csv file from PannotatoR\ndf_spinifex &lt;- read.csv(file = \"Data_files/df_spinifex.csv\", header = TRUE, sep = \",\")\n\ndf_oak &lt;- readRDS(\"Data_files/oak_data_user1.Rds\")\n\n\n\n\n\nNow we add the plot and information to each frame in the .rds file. This is useful code if you have multiple plots or subplots in a single .rds file. In this example we have only one plot (plot_06_new). A .csv file linking plot ID to frame or .kmz file ID is required.\n\n\nShow the code\n# Now we add the plot and information to each frame in the .rds file. This is useful code if you have multiple plots or subplots in a single .rds file. In this example we have only one plot (plot_06_new). A .csv file linking plot ID to frame or .kmz file ID is required\n\n# Import the csv file \ndf_plot_number &lt;- read.csv(file = \"Data_files/Plot_names.csv\") \n\n# This function adds a plot_kmz column,fills it with a substring from the imagefile column, add a frame column with a substring from the imagefile column, and then match the plot number to the plot_kmz in the df_plot_number dataframe.\n\nadd_plot_kmz &lt;- function(df) {\n  df$plot_kmz &lt;- substr(df$imagefile,1,24)\n  df$frame &lt;- substring(df$imagefile,1,37 )\n  df$plot_name_new &lt;- df_plot_number$plot_name_new[match(df$plot_kmz, df_plot_number$plot)]\n  return(df)\n}\n\ndf_species &lt;- add_plot_kmz(df_species)\ndf_spinifex &lt;- add_plot_kmz(df_spinifex)\ndf_oak &lt;- add_plot_kmz(df_oak)\n\n\n\n\n\nThis code maps the points for a quick look at the data.\n\n\nShow the code\n# Using the geometry field\ndf_species &lt;- st_as_sf(df_species, wkt = \"geometry\",crs = 4326) \ns1 &lt;- mapview(df_species)\n\nmapshot(s1, file = \"Data_files/species_map.png\")\n\ndf_spinifex &lt;- st_as_sf(df_spinifex, wkt = \"geometry\",crs = 4326) \ns2 &lt;- mapview(df_spinifex)\n\nmapshot(s2, file = \"Data_files/spinifex_map.png\")\n\ndf_oak &lt;- st_as_sf(df_oak, wkt = \"geometry\",crs = 4326) \ns3 &lt;- mapview(df_oak)\n\nmapshot(s3, file = \"Data_files/desertoak_map.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  s1\n  s2\n  s3\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  s1\n  s2\n  s3\n}"
  },
  {
    "objectID": "pannotator_examples.html#load-libraries",
    "href": "pannotator_examples.html#load-libraries",
    "title": "pannotator examples",
    "section": "",
    "text": "This code loads in the libraries needed.\n\n\nShow the code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(mapview)\nlibrary(RColorBrewer)\nlibrary(rcompanion)\nlibrary(sf)\nlibrary(stringr)\nlibrary(webshot)"
  },
  {
    "objectID": "pannotator_examples.html#read-species-richness-spinifex-cover-and-tree-health-.rds-files",
    "href": "pannotator_examples.html#read-species-richness-spinifex-cover-and-tree-health-.rds-files",
    "title": "pannotator examples",
    "section": "",
    "text": "This code reads in the .Rds files containing species, spinifex cover and tree crown data.\n\n\nShow the code\n# Read in the .Rds files containing species, spinifex cover and tree crown data\n\n# If you have exported an .Rds file from PannotatoR\ndf_species &lt;- readRDS(\"Data_files/df_species.Rds\")\n\n# If you have exported an .csv file from PannotatoR\ndf_spinifex &lt;- read.csv(file = \"Data_files/df_spinifex.csv\", header = TRUE, sep = \",\")\n\ndf_oak &lt;- readRDS(\"Data_files/oak_data_user1.Rds\")"
  },
  {
    "objectID": "pannotator_examples.html#add-plot-and-frame-numbers-to-each-.rds-file",
    "href": "pannotator_examples.html#add-plot-and-frame-numbers-to-each-.rds-file",
    "title": "pannotator examples",
    "section": "",
    "text": "Now we add the plot and information to each frame in the .rds file. This is useful code if you have multiple plots or subplots in a single .rds file. In this example we have only one plot (plot_06_new). A .csv file linking plot ID to frame or .kmz file ID is required.\n\n\nShow the code\n# Now we add the plot and information to each frame in the .rds file. This is useful code if you have multiple plots or subplots in a single .rds file. In this example we have only one plot (plot_06_new). A .csv file linking plot ID to frame or .kmz file ID is required\n\n# Import the csv file \ndf_plot_number &lt;- read.csv(file = \"Data_files/Plot_names.csv\") \n\n# This function adds a plot_kmz column,fills it with a substring from the imagefile column, add a frame column with a substring from the imagefile column, and then match the plot number to the plot_kmz in the df_plot_number dataframe.\n\nadd_plot_kmz &lt;- function(df) {\n  df$plot_kmz &lt;- substr(df$imagefile,1,24)\n  df$frame &lt;- substring(df$imagefile,1,37 )\n  df$plot_name_new &lt;- df_plot_number$plot_name_new[match(df$plot_kmz, df_plot_number$plot)]\n  return(df)\n}\n\ndf_species &lt;- add_plot_kmz(df_species)\ndf_spinifex &lt;- add_plot_kmz(df_spinifex)\ndf_oak &lt;- add_plot_kmz(df_oak)"
  },
  {
    "objectID": "pannotator_examples.html#map-the-location-of-data-points-in-each-file",
    "href": "pannotator_examples.html#map-the-location-of-data-points-in-each-file",
    "title": "pannotator examples",
    "section": "",
    "text": "This code maps the points for a quick look at the data.\n\n\nShow the code\n# Using the geometry field\ndf_species &lt;- st_as_sf(df_species, wkt = \"geometry\",crs = 4326) \ns1 &lt;- mapview(df_species)\n\nmapshot(s1, file = \"Data_files/species_map.png\")\n\ndf_spinifex &lt;- st_as_sf(df_spinifex, wkt = \"geometry\",crs = 4326) \ns2 &lt;- mapview(df_spinifex)\n\nmapshot(s2, file = \"Data_files/spinifex_map.png\")\n\ndf_oak &lt;- st_as_sf(df_oak, wkt = \"geometry\",crs = 4326) \ns3 &lt;- mapview(df_oak)\n\nmapshot(s3, file = \"Data_files/desertoak_map.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  s1\n  s2\n  s3\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  s1\n  s2\n  s3\n}"
  },
  {
    "objectID": "pannotator_examples.html#clean-up-the-species-data-df_species-for-mapping-and-analysis",
    "href": "pannotator_examples.html#clean-up-the-species-data-df_species-for-mapping-and-analysis",
    "title": "pannotator examples",
    "section": "Clean up the species data (df_species) for mapping and analysis",
    "text": "Clean up the species data (df_species) for mapping and analysis\n\n\nShow the code\n# View(df_species)\n# Create a new species variable \ndf_species$Species_new &lt;- NA\n\n# If variable dd3 = -999, then add species (mulga information), otherwise keep the species listed in dd3. This annoatation was used to quantify mulga cover and also to add additional species #\ndf_species$Species_new &lt;- ifelse(df_species$dd3 == -999, df_species$species, df_species$dd3)\n\n\n# For simplicity of data analysis we must now rename the species in the species_new variable \n\ndf_species$Species_new[df_species$Species_new == 'Acacia_aneura (mulga)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Acacia_ligulata (dune wattle)'] &lt;-'Acacia_ligulata'\n\ndf_species$Species_new[df_species$Species_new == 'Acacia_minyura (desert mulga)'] &lt;-'Acacia_minyura'\n\ndf_species$Species_new[df_species$Species_new == 'Allocasuarina_decaisneana (oak)'] &lt;-'Allocasuarina_decaisneana'\n\ndf_species$Species_new[df_species$Species_new == 'Burnt Mulga Mature (3-6m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Burnt Mulga Juvenile (1-3m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Burnt Mulga Overmature (3-6m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Codonocarpus_cotinifolius (poplar)'] &lt;-'Codonocarpus_cotinifolius'\n\ndf_species$Species_new[df_species$Species_new == 'Grevillea_eriostachya (honey grevillea)'] &lt;-'Grevillea_eriostachya'\n\ndf_species$Species_new[df_species$Species_new == 'Grevillea_stenobotrys (sandhill grevillea)'] &lt;-'Grevillea_stenobotrys'\n\ndf_species$Species_new[df_species$Species_new == 'Gyrostemon_ramulosus (camel poison)'] &lt;-'Gyrostemon_ramulosus'\n\ndf_species$Species_new[df_species$Species_new == 'Mulga Juvenile (1-3m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Mulga Mature (3-6m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Mulga Seedling (&lt;1m)'] &lt;-'Acacia_aneura'\n\ndf_species$Species_new[df_species$Species_new == 'Santalum_lanceolatum (sandalwood)'] &lt;-'Santalum_lanceolatum'\n\ndf_species$Species_new[df_species$Species_new == 'Themeda_australis (kangaroo grass)'] &lt;-'Crotalaria_cunninghamii'\n\ndf_species$Species_new[df_species$Species_new == 'Themeda_avenaceae (oat grass)'] &lt;-'Crotalaria_cunninghamii'\n\ndf_species$Species_new[df_species$Species_new == 'Acacia_kempeana (granite wattle)'] &lt;-'Acacia_kempeana'\n\ndf_species$Species_new[df_species$Species_new == 'Corymbia_opaca (desert bloodwood)'] &lt;-'Corymbia_opaca'\n\ndf_species$Species_new[df_species$Species_new == 'Eucalyptus_gamophylla (blue mallee)'] &lt;-'Eucalyptus_gamophylla'\n\n# We now Clean up a few more cases. We don't want any data points that contain no species data, unknown species, or species with unclear taxonomy (e.g., Hakea spp.) \n\ndf_species &lt;- subset(df_species, Species_new != \"No Mulga present\")\ndf_species &lt;- subset(df_species, Species_new != \"Re_Check_Unknown_Shrub\")\ndf_species &lt;- subset(df_species, Species_new != \"Hakea_sp\")\ndf_species &lt;- subset(df_species, Species_new != \"Acacia_sp\")\ndf_species &lt;- subset(df_species, Species_new != \"Gyrostemon_sp.\")\n\n# Remove species and location duplicates \nduplicated_rows &lt;- duplicated(df_species[c(\"Species_new\", \"geometry\")])\ndf_species&lt;- df_species[!duplicated_rows, ]\n\n# We must now jitter the geometries so that we can see the data easier in mapview. Many of the locations are very close together \ndf_species_jittered &lt;- st_jitter(df_species, amount = 0.00001)"
  },
  {
    "objectID": "pannotator_examples.html#map-the-species-distributions-generate-image-for-figure-5a-in-paper",
    "href": "pannotator_examples.html#map-the-species-distributions-generate-image-for-figure-5a-in-paper",
    "title": "pannotator examples",
    "section": "Map the species distributions (generate image for Figure 5a in paper)",
    "text": "Map the species distributions (generate image for Figure 5a in paper)\nThis is useful code for plotting species distributions in mapview, including setting colour schemes within a user-specified species order.\n\n\nShow the code\n# This code generates Figure 5A \n\n# Confirm the data \n#mapview(df_species_jittered, zcol = \"Species_new\", cex = 8, alpha = 0.9) \n\n# Here I reorder the species from sand dune crest species to swale species (approximately) \n\ndf_species_jittered$speciesReorder &lt;- factor(df_species_jittered$Species_new, c('Crotalaria_cunninghamii','Gyrostemon_ramulosus', 'Acacia_ligulata',   'Aluta_maisonneuvei', 'Newcastelia_spodiotricha', 'Gyrostemon_tepperi','Codonocarpus_cotinifolius', 'Grevillea_eriostachya', 'Allocasuarina_decaisneana', 'Exocarpus_sparteus',  'Eremophila_sp', 'Eucalyptus_Mallee_sp.', 'Eucalyptus_gamophylla', 'Corymbia_opaca', 'Acacia_kempeana' ,'Acacia_aneura'))\n\n# Here I colour species groups according to their typical ecological position; e.g., sand dune crest species in red, swale species in white\np &lt;- mapview(df_species_jittered, zcol = \"speciesReorder\", cex = 5, alpha = 1, alpha.regions = 0.9, layer.name = \"Species\", col.regions = c(\"red4\",\"red4\", 'red4', \"orange\", 'yellow3','yellow3', 'yellow2','yellow2','green3','green2','green4', 'deepskyblue2', 'deepskyblue2','purple','white','white'), \n        na.rm = TRUE)\n\nmapshot(p, file = \"Data_files/Fig_5a.png\")\n\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "pannotator_examples.html#make-a-25-m-buffer-around-each-plot-create-a-polygon-segment-it-and-calculate-species-diversity-in-each-segment",
    "href": "pannotator_examples.html#make-a-25-m-buffer-around-each-plot-create-a-polygon-segment-it-and-calculate-species-diversity-in-each-segment",
    "title": "pannotator examples",
    "section": "Make a 25 m buffer around each plot, create a polygon, segment it and calculate species diversity in each segment",
    "text": "Make a 25 m buffer around each plot, create a polygon, segment it and calculate species diversity in each segment\nThis is useful code to add a buffer around each data point in the dataframe, combined these together if overlapping into a series of polygons. The intent is to then split up the polygons according to another spatial dataframe, in this case a .kml containing lines that divide the west side of the transect into 50 m segments with approximately homogeneous vegetation."
  },
  {
    "objectID": "pannotator_examples.html#make-buffer-around-each-point-and-create-polygons",
    "href": "pannotator_examples.html#make-buffer-around-each-point-and-create-polygons",
    "title": "pannotator examples",
    "section": "Make buffer around each point and create polygon(s)",
    "text": "Make buffer around each point and create polygon(s)\n\n\nShow the code\n# Add a spatial buffer of 25m around each point\nbuffer &lt;- st_buffer(df_species_jittered, dist = 50)\n\n# Combine the resulting buffers into a single polygon\npolygon &lt;- st_union(buffer)\n\n# mapview(polygon) # we can see that the buffers have been merged into a series of polygons.\n\n# Export the resulting polygon as a .kml file\nst_write(polygon, \"Data_files/buffer_plot_polygon.kml\", append= FALSE, driver = \"KML\")"
  },
  {
    "objectID": "pannotator_examples.html#import-the-.kml-file-for-segmenting-the-polygons-and-cut-the-polygons",
    "href": "pannotator_examples.html#import-the-.kml-file-for-segmenting-the-polygons-and-cut-the-polygons",
    "title": "pannotator examples",
    "section": "Import the .kml file for segmenting the polygon(s) and cut the polygon(s)",
    "text": "Import the .kml file for segmenting the polygon(s) and cut the polygon(s)\n\n\nShow the code\n# This is.kml file that contains lines that cut the westerly side of the study transect into a series of segments roughly 50 m apart. Each segment was oriented to contain homogenous vegetation. It was drawn in Google Earth. \n\nsegmentation_lines &lt;- st_read(\"Data_files/polygon_cuts.kml\")\n\n# Map the lines \n# mapview(segmentation_lines) \n\n# Before we cut the polygons using the segmentation lines we mustrepair the geometry of the polygon and lines data for any errors \npolygon_valid &lt;- st_make_valid(polygon)\n# mapview(polygon_valid)\n\nlines_valid &lt;- st_make_valid(segmentation_lines)\n# mapview(lines_valid)\n\n# Now cut the polygon using the segmentation lines \ncut_polygon &lt;- polygon_valid %&gt;% \n  lwgeom::st_split(lines_valid) %&gt;% \n  st_collection_extract(\"POLYGON\")\n\np &lt;- mapview(cut_polygon)\n\nmapshot(p, file = \"Data_files/cut_polygon.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "pannotator_examples.html#calculate-the-species-richness-in-each-of-the-new-polygons",
    "href": "pannotator_examples.html#calculate-the-species-richness-in-each-of-the-new-polygons",
    "title": "pannotator examples",
    "section": "Calculate the species richness in each of the new polygons",
    "text": "Calculate the species richness in each of the new polygons\n\n\nShow the code\n# Now we will calculate the number of species in each polygon segment.We are interested in polygons with IDs.\n\n# The cut_polygon object is an 'sfc' object and we want to make it an 'sf' object\nclass(cut_polygon) \n\n# Create a new data frame\ndf &lt;- data.frame(id = 1:length(cut_polygon)) \n\n# Add the sfc_POLYGON object as a geometry column\ndf$geometry &lt;- cut_polygon \n\n# Convert the data frame to an sf object\ncut_polygon_sf &lt;- st_as_sf(df)  \n\n# Now an sf object with 72 polygons.\n# str(cut_polygon_sf)\n\nst_write(cut_polygon_sf, \"Data_files/cut_polygon_plot_sf.kml\", append= FALSE, driver = \"KML\")\n\n# Now determine which polygon each point falls into \nresult &lt;- st_join(df_species_jittered, cut_polygon_sf)\n\n# Convert the polygon ID to character \nresult$id &lt;- as.character(result$id) \n\n# Now we calculate the species diversity of each polygon \n\nspecies_div &lt;- result %&gt;%\n  group_by(id) %&gt;%\n  summarise(num_species = n_distinct(speciesReorder))\n\nspecies_div"
  },
  {
    "objectID": "pannotator_examples.html#plot-the-centroids-of-each-polygon-with-species-richness-of-the-polygon-image-for-figure-5f",
    "href": "pannotator_examples.html#plot-the-centroids-of-each-polygon-with-species-richness-of-the-polygon-image-for-figure-5f",
    "title": "pannotator examples",
    "section": "Plot the centroids of each polygon with species richness of the polygon (image for Figure 5f)",
    "text": "Plot the centroids of each polygon with species richness of the polygon (image for Figure 5f)\n\n\nShow the code\n# To enable plotting we calculate the centroids of each polygon\naverage_geometry &lt;- st_centroid(species_div$geometry)\nspecies_div_centroids &lt;- st_set_geometry(species_div, average_geometry)\n\n# mapview(species_div_centroids)\n\n# We can select the centroids along the west side of the transect using this code if we want, default is to plot all\n\n# id_values &lt;- c(14:23, 25:38, 2:7, 9)\n# Species_div_centroids_subset &lt;- species_div_centroids[species_div_centroids$id %in% id_values, ]\n\n# Rename\nspecies_div_centroids_subset &lt;- species_div_centroids \n\n# Removed the very large unsegmented polygon\nspecies_div_centroids_subset &lt;- species_div_centroids_subset[species_div_centroids_subset$num_species &lt; 7, ]\n\n# Check the data\n# mapview(species_div_centroids_subset)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"white\", \"red3\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\nq &lt;- mapview(species_div_centroids_subset, zcol = \"num_species\", layer.name = \"Richness\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\nmapshot(q, file = \"Data_files/Fig_5f.png\")\n\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  q\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  q\n}"
  },
  {
    "objectID": "pannotator_examples.html#check-the-data-and-correct-outliers",
    "href": "pannotator_examples.html#check-the-data-and-correct-outliers",
    "title": "pannotator examples",
    "section": "Check the data and correct outliers",
    "text": "Check the data and correct outliers\nHere we are interested in analysing two variables: the % cover of live and dead material within the 10 m diameter plots.\n\n\nShow the code\n# Ensure variables are numeric\ndf_spinifex$live_cover&lt;- as.numeric(df_spinifex$live_cover)\ndf_spinifex$dead_cover&lt;- as.numeric(df_spinifex$dead_cover)\n\n# Check the range of the data fields of interest. Percentage cover is the % cover within the 10 m diameter plots, impact score is based on the percentage of dead versus live material.\n\n# Within range\nsummary(df_spinifex$live_cover) \n# Within range\nsummary(df_spinifex$dead_cover) \n\n# Generate an object with total live and dead cover in each frame \nframe_sum &lt;- df_spinifex %&gt;% \n  group_by(frame) %&gt;%\n  summarise(across(c(dead_cover, live_cover), sum, .names = \"{.col}\"))\n\n# Calculate the total spinifex cover variable \nframe_sum$total_cover &lt;- frame_sum$dead_cover+ frame_sum$live_cover \n\nframe_sum"
  },
  {
    "objectID": "pannotator_examples.html#map-the-total-cover-of-live-and-dead-cover-within-each-image-frame-images-for-figures-6c-and-6d",
    "href": "pannotator_examples.html#map-the-total-cover-of-live-and-dead-cover-within-each-image-frame-images-for-figures-6c-and-6d",
    "title": "pannotator examples",
    "section": "Map the total cover of live and dead cover within each image frame (images for Figures 6c and 6d)",
    "text": "Map the total cover of live and dead cover within each image frame (images for Figures 6c and 6d)\n\n\nShow the code\n# Rename the object\ndata &lt;- frame_sum  \n\n# Set the mapview options for live cover\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"transparent\", \"green\", 'darkgreen')),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\n# Plot of live cover \np &lt;- mapview(data, zcol = \"live_cover\", layer.name = \"Cover(%)\", cex = 10, alpha = 0.9, alpha.regions = 0.9,  na.rm = TRUE)\n\n#p\n\nmapshot(p, file = \"Data_files/Fig_6c.png\")\n\n# Set the mapview options for dead cover\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"white\", \"red\", \"darkred\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\n# Plot of dead cover\nq &lt;- mapview(data, zcol = \"dead_cover\", layer.name = \"Cover(%)\", cex = 10, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\nmapshot(q, file = \"Data_files/Fig_6d.png\")\n\n#q\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n  \n  q\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n  \n  q\n}"
  },
  {
    "objectID": "pannotator_examples.html#map-the-cover-of-different-spinifex-size-classes-within-each-image-frame-image-for-figure-6e",
    "href": "pannotator_examples.html#map-the-cover-of-different-spinifex-size-classes-within-each-image-frame-image-for-figure-6e",
    "title": "pannotator examples",
    "section": "Map the cover of different spinifex size classes within each image frame (image for Figure 6e)",
    "text": "Map the cover of different spinifex size classes within each image frame (image for Figure 6e)"
  },
  {
    "objectID": "pannotator_examples.html#re-name-spinifex-speciessize-data-for-size-class-analysis",
    "href": "pannotator_examples.html#re-name-spinifex-speciessize-data-for-size-class-analysis",
    "title": "pannotator examples",
    "section": "Re-name spinifex species/size data for size class analysis",
    "text": "Re-name spinifex species/size data for size class analysis\n\n\nShow the code\ndf_spinifex$species[df_spinifex$species == 'No Triodia Present'] &lt;- 'Absent'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens  &gt;100cm old fragmentary'] &lt;- 'frag'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia sp. &gt;100cm old fragmentary'] &lt;- 'frag'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens &lt; 50 cm'] &lt;- '&lt;50'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia sp. 50-&lt;100 cm'] &lt;- '50_100'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia sp. 100-&lt;200 cm'] &lt;- '100_200'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens 200-&lt;400 cm'] &lt;- '200_400'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia sp. &lt; 50 cm'] &lt;- '&lt;50'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens 50-&lt;100 cm'] &lt;- '50_100'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens 100-&lt;200 cm'] &lt;- '100_200'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia schinzii 50-&lt;100 cm'] &lt;- '50_100'\n\ndf_spinifex$species[df_spinifex$species == 'Triodia pungens 400+ cm'] &lt;- '&gt;400'"
  },
  {
    "objectID": "pannotator_examples.html#calculate-and-map-the-cover-and-distribution-of-50cm-and-fragmentary-old-1m-size-classes-image-for-figure-6e",
    "href": "pannotator_examples.html#calculate-and-map-the-cover-and-distribution-of-50cm-and-fragmentary-old-1m-size-classes-image-for-figure-6e",
    "title": "pannotator examples",
    "section": "Calculate and map the cover and distribution of < 50cm and fragmentary (old > 1m) size classes (image for Figure 6e)",
    "text": "Calculate and map the cover and distribution of &lt; 50cm and fragmentary (old &gt; 1m) size classes (image for Figure 6e)\n\n\nShow the code\n# Subset spinifex data for only &lt; 50 cm size class\nLess50cm &lt;- subset(df_spinifex, df_spinifex$species == \"&lt;50\")\n \n# Subset spinifex data for only old fragmentary size class\nfrag &lt;- subset(df_spinifex, df_spinifex$species == \"frag\")\n\n# Jitter the data so that they can be seen more easily in the map\njittered_frag &lt;- st_jitter(frag, amount = 0.0001)  \njittered_Less50cm &lt;- st_jitter(Less50cm, amount = 0.0001)\n\n# Map the variables together - Figure 6e\np &lt;- mapview(jittered_frag, zcol = \"percentage_cover\", layer.name = \"Frag_Cover(%)\", cex = 8, alpha = 0.9, alpha.regions = 0.75, col.regions = colorRampPalette(c(\"yellow\", \"orange\", 'orange4')), na.rm = TRUE)  + mapview(jittered_Less50cm, zcol = \"percentage_cover\", cex = 8, alpha = 0.75, alpha.regions = 0.9, col.regions = colorRampPalette(c(\"lightblue\", \"blue\", 'darkblue')),layer.name = \"L50_Cover(%)\", na.rm = TRUE)\n\nmapshot(p, file = \"Data_files/Fig_6e.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "pannotator_examples.html#create-boxplot-of-size-class-vs-pre-drought-and-post-drought-percentage-cover-with-kruskal-wallis-test-image-for-figure-6f",
    "href": "pannotator_examples.html#create-boxplot-of-size-class-vs-pre-drought-and-post-drought-percentage-cover-with-kruskal-wallis-test-image-for-figure-6f",
    "title": "pannotator examples",
    "section": "Create boxplot of size class vs pre-drought and post-drought percentage cover with kruskal-wallis test (image for Figure 6f)",
    "text": "Create boxplot of size class vs pre-drought and post-drought percentage cover with kruskal-wallis test (image for Figure 6f)\n\n\nShow the code\ndf_spinifex_full_data &lt;- df_spinifex\n\ndf_spinifex &lt;- df_spinifex %&gt;%\n  filter(percentage_cover &gt; 0)\n\ndf_spinifex &lt;- df_spinifex[df_spinifex$species != 'Absent', ]\ndf_spinifex &lt;- df_spinifex[df_spinifex$species != 'NA', ]\n\ndf_spinifex$speciesReorder &lt;- factor(df_spinifex$species, c(\"&lt;50\", \"50_100\", \"100_200\", \"200_400\", \"&gt;400\", \"frag\"))\n\np &lt;- ggplot(df_spinifex, aes(x = speciesReorder, y = percentage_cover)) +\n  geom_boxplot() + theme_bw() +  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.text.x = element_text(size = 14),\n        axis.text.y = element_text(size = 14))\n\np &lt;- p + ggtitle(\"\") +\n  xlab(\"Size class (cm)\") + ylab(\"Pre-drought cover\") +\n  theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face=\"bold\"))\n\nggsave(\"Data_files/Fig_6f.png\", width = 6.81, height = 6.45, dpi = 300)\n\n# Test for nonparametric relationship between percentage cover and size class\n\nkruskal.test(percentage_cover ~ speciesReorder, data = df_spinifex)"
  },
  {
    "objectID": "pannotator_examples.html#import-the-lookup-csv-containing-size-classes-and-match-to-size-class-data-in-the-df_oak-object",
    "href": "pannotator_examples.html#import-the-lookup-csv-containing-size-classes-and-match-to-size-class-data-in-the-df_oak-object",
    "title": "pannotator examples",
    "section": "Import the lookup csv containing size classes and match to size class data in the df_oak object",
    "text": "Import the lookup csv containing size classes and match to size class data in the df_oak object\n\n\nShow the code\n# The original df_oak data have been imported in code above \n\n# Import the match table\ndf_oak_class &lt;- read.csv(\"Data_files/Oak_sizes_reclass.csv\")\n\n# We must create new variables to allow the match \ndf_oak$Taxon &lt;- NA\ndf_oak$Size_class &lt;- NA\ndf_oak$Burnt &lt;- NA\ndf_oak$Count &lt;- NA\n\n# We must remove whitespace and other incompatibilities\n\ndf_oak$species &lt;- str_replace_all(df_oak$species, \"&lt;.*?&gt;\", \"\")\ndf_oak_class$species &lt;- str_replace_all(df_oak_class$species, \"&lt;.*?&gt;\", \"\")\n\ndf_oak$species &lt;- str_to_lower(df_oak$species)\ndf_oak$species &lt;- str_replace_all(df_oak$species, \"\\\\s+\", \"\")\n\ndf_oak_class$species &lt;- str_to_lower(df_oak_class$species)\ndf_oak_class$species &lt;- str_replace_all(df_oak_class$species, \"\\\\s+\", \"\")\n\n# Now merge Taxon, Burnt, Size_class, Species\n\ndf_oak$Taxon &lt;- df_oak_class$Taxon[match(df_oak$species, df_oak_class$species)]\n\ndf_oak$Burnt &lt;- df_oak_class$Burnt[match(df_oak$species, df_oak_class$species)]\n\ndf_oak$Count &lt;- df_oak_class$Count[match(df_oak$species, df_oak_class$species)]\n\ndf_oak$Size_class &lt;- df_oak_class$Size_class[match(df_oak$species, df_oak_class$species)]"
  },
  {
    "objectID": "pannotator_examples.html#calculate-crown-health-score-and-compare-crown-health-across-size-classes-create-image-for-figure-7f",
    "href": "pannotator_examples.html#calculate-crown-health-score-and-compare-crown-health-across-size-classes-create-image-for-figure-7f",
    "title": "pannotator examples",
    "section": "Calculate crown health score and compare crown health across size classes (create image for Figure 7f)",
    "text": "Calculate crown health score and compare crown health across size classes (create image for Figure 7f)\n\n\nShow the code\n# Ensure that the variables are numeric \ndf_oak$dd1 &lt;- as.numeric(df_oak$dd1) \ndf_oak$dd2 &lt;- as.numeric(df_oak$dd2)\ndf_oak$dd3 &lt;- as.numeric(df_oak$dd3)\n\n# Calculate the crown score (HC = AC × CE × CD in paper)\ndf_oak$Crown_score &lt;- df_oak$dd1/100 * df_oak$dd2/100 * df_oak$dd3/100\n\n# Reorder the classes in order of size \ndf_oak$Size_class_Reorder &lt;- factor(df_oak$Size_class, c(\"Seedling\", \"Juvenile\", \"Early_Pole\", \"Late_Pole\", \"Early_Mature\", \"Mature\"))\n\n# Boxplot of size class and burnt vs crown score\np &lt;- ggplot(df_oak, aes(x = Size_class_Reorder, y = Crown_score,  z = Burnt, fill = Burnt, color = Burnt )) +\n  geom_boxplot() + theme_bw() + theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n      scale_fill_manual(values=c(\"green4\",\"brown3\")) +\n      scale_color_manual(values=c(\"darkgreen\",\"brown4\")) +\n      theme_classic()  +\n      theme(panel.border = element_rect(color = \"black\", fill = NA, size = 2))\n\np &lt;- p + ggtitle(\"\") +\n  xlab(\"Size class\") + ylab(\"Crown score\") +\n  theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face=\"bold\"))\n\nggsave(\"Data_files/Fig_7f.png\", width = 7.25, height = 6.45, dpi = 300)\n\n# Test for nonparametric relationship between crown score and burnt + size class \nscheirerRayHare(Crown_score ~ Burnt + Size_class_Reorder, data = df_oak)"
  },
  {
    "objectID": "pannotator_examples.html#map-burnt-and-unburnt-tree-crowns-image-for-figure-7e",
    "href": "pannotator_examples.html#map-burnt-and-unburnt-tree-crowns-image-for-figure-7e",
    "title": "pannotator examples",
    "section": "Map burnt and unburnt tree crowns (image for Figure 7e)",
    "text": "Map burnt and unburnt tree crowns (image for Figure 7e)\n\n\nShow the code\n# Map burnt and unburnt areas \np &lt;- mapview(df_oak, zcol = \"Burnt\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Burnt\", col.regions = c(\"green2\", \"red2\"), na.rm = TRUE)\n\nmapshot(p, file = \"Data_files/Fig_7e.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "pannotator_examples.html#map-the-distribution-of-tree-size-classes-image-for-figure-7c",
    "href": "pannotator_examples.html#map-the-distribution-of-tree-size-classes-image-for-figure-7c",
    "title": "pannotator examples",
    "section": "Map the distribution of tree size classes (image for Figure 7c)",
    "text": "Map the distribution of tree size classes (image for Figure 7c)\n\n\nShow the code\n# Map size classes \np &lt;- mapview(df_oak, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"#389f0a\", \"#389f0a\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE)\n\nmapshot(p, file = \"Data_files/Fig_7c.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "pannotator_examples.html#plot-the-crown-health-of-mature-and-early-mature-size-classes-figure-7d",
    "href": "pannotator_examples.html#plot-the-crown-health-of-mature-and-early-mature-size-classes-figure-7d",
    "title": "pannotator examples",
    "section": "Plot the crown health of mature and early mature size classes (Figure 7d)",
    "text": "Plot the crown health of mature and early mature size classes (Figure 7d)\n\n\nShow the code\n# Select only mature and early mature size classes \n\nMature &lt;- subset(df_oak, df_oak$Size_class == \"Mature\" | df_oak$Size_class == \"Early_mature\")\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\np &lt;- mapview(df_oak, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\nmapshot(p, file = \"Data_files/Fig_7d.png\")\n\nif (knitr::is_latex_output()) {\n  # This part runs only for PDF output\n} else if (knitr::is_html_output()) {\n  # This part runs only for HTML output\n  p\n} else {\n  # This part runs if neither PDF nor HTML is the target format\n  p\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index of Pages",
    "section": "",
    "text": "Index of Pages\n\npannotator_data_validation\npannotator_examples"
  },
  {
    "objectID": "pannotator_data_validation.html",
    "href": "pannotator_data_validation.html",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "This file contains a preliminary assessment of the ability of data extracted from 360-degree panospheric images using the pannotator software to reliably capture important ecological variables that have been reported in the accompanying paper. The analyses and results reported in this document are based on data collected over a series of validation plots located across Uluru-Kata Tjuta National Park, Australia in which field survey data and 360-degree images were collected and in the main study transect reported in the paper.\nHere we focus on three sets of analyses that investigate the reliability and repeatability of key ecological data presented in the paper:\n\nA comparison of plot-level plant species lists constructed from both 360-degree camera images and accompanying field survey data (based on validation plots),\nA comparison of plant cover estimates, again using both 360-degree camera images and field survey data (based on validation plots),\nConsistency in the scoring of tree crown health by different users of the pannotator package (based on the main transect).\n\nWe note that the analyses presented here relate only to the data collected in our study, and that research focusing on different species or systems will likely require different methods for collecting 360-degree images and for calibration. However, based on our results we draw general conclusions relevant to other study systems and provide practical advice for collecting images and calibrating image-based data in the accompanying paper.\n\n\nThe species and cover analyses conducted below are based on data collected from a series of validation plots (20 m diameter) located on the edges or corners of square transects that measure 1 km on each side. The plots were established across Uluru-Kata Tjuta National Park to capture variation in landforms and vegetation across the Park. Crown data for desert oak (Allocasuarina decaisneana) were extracted from 360-degree images collected along the main 4 km long study transect centred on S 25.35 degrees, W 130.72 degrees (see accompanying paper).\n\n\n\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ purrr     1.0.2\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ data.table::between() masks dplyr::between()\n✖ dplyr::filter()       masks stats::filter()\n✖ data.table::first()   masks dplyr::first()\n✖ lubridate::hour()     masks data.table::hour()\n✖ lubridate::isoweek()  masks data.table::isoweek()\n✖ dplyr::lag()          masks stats::lag()\n✖ data.table::last()    masks dplyr::last()\n✖ lubridate::mday()     masks data.table::mday()\n✖ lubridate::minute()   masks data.table::minute()\n✖ lubridate::month()    masks data.table::month()\n✖ lubridate::quarter()  masks data.table::quarter()\n✖ lubridate::second()   masks data.table::second()\n✖ purrr::transpose()    masks data.table::transpose()\n✖ lubridate::wday()     masks data.table::wday()\n✖ lubridate::week()     masks data.table::week()\n✖ lubridate::yday()     masks data.table::yday()\n✖ lubridate::year()     masks data.table::year()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nAll woody plant species (subshrubs &lt; 50 cm tall, shrubs &gt;= 50 cm tall and trees) along with species of Triodia (spinifex grasses) were identified inside 79 validation plots (20 m diameter) during field surveys conducted in August 2022. Here we read in the .csv file and create the R dataframe ‘species_data’.\nThe dataframe ‘species_data’ contains the following variables:\nColumn [1] (ID) = record identifier; [2] (Plot) = plot number, [3] (Location) = location of plot along transect (NE, NW, SE, SW corner or extra plot); [4] (Latitude) = latitude in decimal degrees; [5] (Longitude) = longitude in decimal degrees; [6] (Closest_image) = identity of closest 360-degree image (for pannotator annotation); [7] (Camera_d_to_plot) = approximate distance (m) from camera image centre to survey plot centre; [8] (No_Field_species) = number of species identified in field survey; [9] (No_Camera_species) = number of species identified in camera survey; [10] (In_field_not_camera) = number of species unique to field survey;\n[11] (Notes) = notes on errors in data collection, where ‘NoDiscrepancy’ = no differences between field survey and camera survey species lists, ‘Inside5m’ = the species not identified (missed in the survey) was within 5 m of the plot centre and camera, ‘Outside5m’ = the species missed was more than 5m from the plot centre and camera, and ‘FieldError’ = the species was incorrectly recorded as absent in the field survey;\n[12]-[14] (Field_extra_Species_1, Field_extra_Species_2, Field_extra_Species_3) = names of extra species recorded in the field survey; [15] (In_camera_not_field) = number of species unique to camera survey; [16] (C_E_Species_1) = names of extra species recorded in the camera survey; [17] (Shared_species) = total number of shared species in field and camera survey lists; [18] (Unique_species) = total number of unique species in field and camera survey lists; [19] (Agreement) = Agreement (%), measured as 100 X ((shared species) / (shared + unique species));\n[20]-[51] (AcacAneu, AlloDeca, Triodiasp, AlutMais, GrevErio, AcacLigu, EucaGamo, DicrGile, AcacPrui, EremSpec, DodoVisc, AcacMell, CodoCoti, GyroTepp, AcacMiny, EucaOxy, NewcSpod, AcacMait, ExocSpar, HakeSpec, GrevSten, SanLanc, SennArte, GyroRamo GrevJunc, AcacAmmo, EremLatr, EremGlab, EremGibs, RhagErem, EremLong, Acacia_sp) species present in plots, with Both = species in both field and camera survey lists; CameraOnly = species found only in camera survey list; FieldOnly = species found only in field survey list; Absent = species not recorded in either field or camera survey data.\nThe species are: AcacAneu = Acacia aneura, AlloDeca = Allocasuarina decaisneana, Triodiasp = Triodia species (T. pungens, T. schinzii and T. basedowii), AlutMais = Aluta maisonneuvei, GrevErio = Grevillea eriostachya, AcacLigu = Acacia ligulata, EucaGamo = Eucalyptus gammophylla, DicrGile = Dicrastylis gilesii, AcacPrui = Acacia pruinocarpa, EremSpec = Eremophila sp., DodoVisc = Dodonaea viscosa, AcacMell = Acacia melliodora, CodoCoti = Codonocarpus cotinifolius, GyroTepp = Gyrostemon tepperi, AcacMiny = Acacia minyura, EucaOxy = Eucalyptus oxymitra, NewcSpod = Newcastelia spodiotricha, AcacMait = Acacia maitlandii, ExocSpar = Exocarpos sparteus, HakeSpec = Hakea species , GrevSten = Grevillea stenobotrya, SanLanc = Santalum lanceolatum, SennArte = Senna artemisiodes, GyroRamo = Gyrostemon ramulosum, GrevJunc = Grevillea juncifolia, AcacAmmo = Acacia ammobia , EremLatr = Eremophila latrobei, EremGlab = Eremophila glabra, EremGibs = Eremophila gibsonii , RhagErem = Rhagodia eremaea , EremLong = Eremophila longifolia, Acacia_sp = Acacia species.\n\n\nShow the code\nspecies_data &lt;- read_csv(\"./Data_files/validation_species.csv\", show_col_types = FALSE)\n\n# confirm that there are 79 plots of species data\ncat(\"The number of rows in the dataframe is: \", nrow(species_data))\n\n# initialize table counter\ntable_counter &lt;- 0\n\n# function to generate table numbers and captions\ntable_caption &lt;- function(caption) {\n  table_counter &lt;&lt;- table_counter + 1\n  paste(\"Table\", table_counter, \":\", caption)\n}\n\n# show the first 10 rows of the dataframe\n#kable(head(species_data, 10), format = \"html\", caption=\"Species calibration data frame\") \n\n\nThe number of rows in the dataframe is:  79\n\n\nWe begin by comparing the mean species number across plots using species lists compiled from field survey data and camera images scored in the pannotator package.\n\n\nShow the code\n# find the mean number of species in the field surveys\nField_mean &lt;- summary(species_data$No_Field_species)\ncat(\"The summary for the number of species based on field survey data is:\\n\")\nprint(Field_mean)\ncat(\"\\n\")\n\n# find the mean number of species in the camera surveys\nCamera_mean &lt;- summary(species_data$No_Camera_species)\ncat(\"The summary for the number of species based on camera image data is:\\n\")\nprint(Camera_mean)\ncat(\"\\n\")\n\n\nThe summary for the number of species based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   3.266   5.000   7.000 \n\nThe summary for the number of species based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   2.861   4.000   6.000 \n\n\nThe data show that on average we recorded 3.3 species per plot based on field surveys and 2.9 species based on camera images. Thus, there was a weak tendency to record fewer species using camera images. Now we determine the relationship between plot-level species counts in the field survey versus camera survey counts.\n\n\nShow the code\n# abline adds a linear model to the plot.\nplot_sp_richness &lt;- plot(species_data$No_Field_species, species_data$No_Camera_species,\n                         main = \"Plot-level species richness\",\n                         xlab = \"No. of species (Field Survey)\",\n                         ylab = \"No. of species (Camera Survey)\",\n                         pch = 16,  # Use filled circles as data points\n                         col = \"black\",  # Set point color \n                         ylim = c(0, 8),  # Set y-axis limits\n                         xlim = c(0, 8))  # Set x-axis limits\n                    abline(lm(No_Camera_species ~ No_Field_species, data = species_data), col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# create linear model for species data\nmodel &lt;- lm(No_Camera_species ~ No_Field_species, data = species_data)\ncat(\"Model results:\\n\")\nprint(model)\n\n# summarise linear model\nmodel_summary &lt;- summary(model)\ncat(\"Model summary:\\n\")\nprint(model_summary)\n\n\nModel results:\n\nCall:\nlm(formula = No_Camera_species ~ No_Field_species, data = species_data)\n\nCoefficients:\n     (Intercept)  No_Field_species  \n          0.4394            0.7414  \n\nModel summary:\n\nCall:\nlm(formula = No_Camera_species ~ No_Field_species, data = species_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.14654 -0.18080  0.07777  0.33633  1.33633 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.43936    0.14054   3.126   0.0025 ** \nNo_Field_species  0.74144    0.03885  19.087   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5374 on 77 degrees of freedom\nMultiple R-squared:  0.8255,    Adjusted R-squared:  0.8233 \nF-statistic: 364.3 on 1 and 77 DF,  p-value: &lt; 2.2e-16\n\n\nThere is a strong positive relationship between species counts in plots based on field survey and camera survey data which explains 82.3 % of the variation in the data (p &lt; 6.3825904^{-31}). The slope (0.74) again indicates a weak tendency for species lists compiled using camera imagery to be smaller than those based on field survey data.\nNow we assess the percentage agreement in the species lists based on field survey and camera survey data. The percentage agreement (A) is measured as A = 100 X ((shared species) / (shared + unique species)).\n\n\nShow the code\nMean_agreement = summary(species_data$Agreement)\ncat(\"The summary for % agreement between field & camera survey species lists is:\\n\")\nprint(Mean_agreement)\n\n# construct a histogram of the % agreement between mean plot-level species counts based on field and camera surveys\nhist_data &lt;- hist(species_data$Agreement, breaks = seq(0, 100, by = 5),\n                  main = \"Histogram of Field-Camera survey agreement\",\n                  xlab = \"Percent agreement\",\n                  ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for % agreement between field & camera survey species lists is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  25.00   66.67  100.00   83.75  100.00  100.00 \n\n\nOn average there was 84% agreement between field survey and camera survey species lists. The histogram shows that a majority of plots were in 100% agreement, with a second cluster at 65-90% agreement. A small number of plots had lower agreement.\nWe now investigate which species were contributing to the lack of agreement in species lists in certain plots. First we construct a list of the species that were missed in the camera surveys of each plot (i.e., were found only in the field survey), with the number of occasions of each. There are three columns of species found only in the field survey, labelled Field_extra_Species_1, Field_extra_Species_2, and Field_extra_Species_3. Next we construct a list of the species that were recorded ONLY in the camera surveys of each plot (i.e., were not recorded in the field survey), with counts of each. There is one column of species found only in the camera survey, labelled C_E_Species_1.\n\n\nShow the code\n# summarise results for each of the field extra species columns\nsummary_1 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_1)) %&gt;%\n             count(Field_extra_Species_1, sort = TRUE) %&gt;%\n             rename(Species = Field_extra_Species_1) %&gt;%\n             mutate(Species = as.character(Species))\n\nsummary_2 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_2)) %&gt;%\n             count(Field_extra_Species_2, sort = TRUE) %&gt;% \n             rename(Species = Field_extra_Species_2) %&gt;%\n             mutate(Species = as.character(Species))\n\nsummary_3 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_3)) %&gt;%\n             count(Field_extra_Species_3, sort = TRUE) %&gt;%\n             rename(Species = Field_extra_Species_3) %&gt;%\n             mutate(Species = as.character(Species))\n\nfield_only_species &lt;- bind_rows(summary_1, summary_2, summary_3) %&gt;%\n                      group_by(Species) %&gt;%\n                      summarise(n = sum(n)) %&gt;%\n                      arrange(desc(n))\n\n\n# print table using gt\nfield_only_species_gt_table &lt;- gt(field_only_species) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20),\n    quarto.use_bootstrap = TRUE\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Extra species in field surveys\")\n  )\n\nfield_only_species_gt_table\n\n\n\n\n\n\n\n\nTable 1 : Extra species in field surveys\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n11\n\n\nAcacia_ligulata\n4\n\n\nAluta_maisonneuvei\n3\n\n\nAcacia_melliodora\n2\n\n\nAcacia_minyura\n2\n\n\nEremophila_glabra\n2\n\n\nEremophila_latrobei\n2\n\n\nEremophila_longifolia\n2\n\n\nGrevillea_juncifolia\n2\n\n\nAcacia sp.\n1\n\n\nAcacia_maitlandii\n1\n\n\nCodonocarpus_cotinifolius\n1\n\n\nDodonea_viscosa\n1\n\n\nEucalyptus_oxymitra\n1\n\n\nGrevillea_eriostachya\n1\n\n\nGrevillea_stenobotrys\n1\n\n\nHakea_?_lorea\n1\n\n\nRhagodia_eremaea\n1\n\n\nSantalum_lanceolatum\n1\n\n\nSenna_artemisiodes\n1\n\n\n\n\n\n\n\n\n\nShow the code\n# summarise results for each of the species recorded in camera images only\ncamera_only_species &lt;- species_data %&gt;%\n                       filter(!is.na(C_E_Species_1))  %&gt;%\n                       count(C_E_Species_1, sort = TRUE) %&gt;%\n                       rename(Species = 1) %&gt;%\n                       mutate(Species = as.character(Species))\n\ncamera_only_species_gt_table &lt;- gt(camera_only_species) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20),\n    quarto.use_bootstrap = TRUE\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Extra species in camera surveys\")\n  )\n\ncamera_only_species_gt_table\n\n\n\n\n\n\n\n\nTable 2 : Extra species in camera surveys\n\n\nSpecies\nn\n\n\n\n\nAluta_maisonneuvei\n4\n\n\nAcacia_aneura\n3\n\n\nTriodia_sp.\n3\n\n\nAcacia_maitlandii\n1\n\n\nGrevillea_eriostachya\n1\n\n\nNewcastelia_spodiotricha\n1\n\n\n\n\n\n\n\nThese data show that the most common species identified only in the field survey of a given plot was Triodia schinzii, a spinifex grass. In many plots Triodia pungens and Triodia schinzii were both present, but it was not generally possible to distinguish these taxa, the difference of which can usually only be determined by panicle or floral structure. Acacia ligulata and Aluta maisonneuvei were also missed in the camera surveys 4 and 3 times respectively, but these were often in burnt plots. Other species, usually shrubs, were occasionally missed.\nWe now determine some circumstances under which species were not recorded in the two surveys. For this we have the variable species_data$Notes, which has the categories ‘NoDiscrepancy’ = the field and camera survey lists were the same, ‘Outside5m’ = detected in field survey 5 m to 10 m from the plot centre but not in the camera survey, ‘Inside5m’ = detected in field survey within 5 m of the plot centre but not in the camera survey, and ‘FieldError’ where an error was made in the field survey.\n\n\nShow the code\n# count occurrences in 'Notes' column and sort the results\ndf &lt;- species_data %&gt;%\n      count(Notes, sort = TRUE)\n\n# calculate the total number of records\ntotal &lt;- sum(df$n)\n\n# calculate the total number of discrepancies in plots species lists\n# need to filter by specific Notes values corresponding to discrepancies\ndisc &lt;- df %&gt;%\n        filter(Notes %in% c(\"Inside5m\", \"Outside5m\", \"FieldError\")) %&gt;%\n        summarise(total_discrepancies = sum(n)) %&gt;%\n        pull(total_discrepancies)\n\n# calculate the percentage of discrepancies\npcnt_disc &lt;- 100 * (disc / total)\n\n# print the percentage of discrepancies\ncat(paste(\"Percentage of discrepancies:\", round(pcnt_disc, 1), \"%\"))\ncat(\"\\n\")\n\ndf_gt_table &lt;- gt(df) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Discrepancies between field & camera surveys\")\n  )\n\ndf_gt_table\n\n\nPercentage of discrepancies: 45.6 %\n\n\n\n\n\n\n\n\nTable 3 : Discrepancies between field & camera surveys\n\n\nNotes\nn\n\n\n\n\nNoDiscrepancy\n43\n\n\nOutside5m\n22\n\n\nInside5m\n11\n\n\nFieldError\n3\n\n\n\n\n\n\n\nThese data show that there was discrepancy in species lists generate from field and camera surveys in 46% of plots (in 36 of 79 plots), and that in 22 plots (28%) at least one species located more than 5 m from the centre of the plot was missed in the camera survey. In 11 plots (14%) a species was missed in the camera survey when it occurred less than 5 m from the centre of the plot.\nWe now determine which species were missed &lt; 5 m and &gt; 5 m from the plot centre. Those missed &lt; 5 m from the plot centre are the most serious because they fall within the area used to determine species counts in subsequent camera-based surveys (see accompanying paper).\n\n\nShow the code\n# Filtering species_data for notes \"Inside5m\" and removing rows with NA's in Field_extra_Species_1 and Field_extra_Species_2\nspecies_data_L5 &lt;- species_data %&gt;%\n                   filter(Notes == \"Inside5m\") %&gt;%\n                   filter(complete.cases(Field_extra_Species_1))\n\n# Get the species counts for Field_extra_Species_1\nsummary_1_L5 &lt;- species_data_L5 %&gt;%\n                count(Field_extra_Species_1, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_1) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Get the species counts for Field_extra_Species_2\nsummary_2_L5 &lt;- species_data_L5 %&gt;%\n                filter(!is.na(Field_extra_Species_2)) %&gt;%\n                count(Field_extra_Species_2, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_2) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Combine the counts from both columns\nLess5_summary &lt;- bind_rows(summary_1_L5, summary_2_L5) %&gt;%\n                 group_by(Species) %&gt;%\n                 summarise(n = sum(n)) %&gt;%\n                 arrange(desc(n))\n\n\nLess5_summary_gt_table &lt;- gt(Less5_summary) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(title = table_caption(\"Species missed inside 5 metres\"))\n\nLess5_summary_gt_table\n\n# get the total count of missed Triodia schinzii &lt; 5 m from the plot center\nTriodia_index &lt;- which(Less5_summary$Species == \"Triodia_schinzii\")\nTriodia_count &lt;- Less5_summary$n[Triodia_index]\n\n# using `summarize` to calculate the total count from Less5_summary\nTotal_count &lt;- Less5_summary %&gt;%\n               summarize(total = sum(n)) %&gt;%\n               pull(total)\n\n# calculate the percentage of Triodia schinzii\nTriodia_pcnt &lt;- round(100 * (Triodia_count/Total_count),1)\ncat(paste(\"Missed Triodia schinzii (&lt; 5 m) as % of total: \", Triodia_pcnt, \"%\"))\ncat(\"\\n\")\n\n\n\n\n\n\n\n\nTable 4 : Species missed inside 5 metres\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n7\n\n\nAcacia_ligulata\n1\n\n\nAcacia_melliodora\n1\n\n\nEremophila_glabra\n1\n\n\nEucalyptus_oxymitra\n1\n\n\nRhagodia_eremaea\n1\n\n\n\n\n\n\n\nMissed Triodia schinzii (&lt; 5 m) as % of total:  58.3 %\n\n\nNow do the same for species greater than 5 m\n\n\nShow the code\n# Filtering species_data for notes \"Outside5m\" and removing rows with NA's in Field_extra_Species_1 and Field_extra_Species_2\nspecies_data_Gr5 &lt;- species_data %&gt;%\n                   filter(Notes == \"Outside5m\") %&gt;%\n                   filter(complete.cases(Field_extra_Species_1))\n\n# Get the species counts for Field_extra_Species_1\nsummary_1_Gr5 &lt;- species_data_Gr5 %&gt;%\n                count(Field_extra_Species_1, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_1) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Get the species counts for Field_extra_Species_2\nsummary_2_Gr5 &lt;- species_data_Gr5 %&gt;%\n                filter(!is.na(Field_extra_Species_2)) %&gt;%\n                count(Field_extra_Species_2, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_2) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Combine the counts from both columns\nGr5_summary &lt;- bind_rows(summary_1_Gr5, summary_2_Gr5) %&gt;%\n                 group_by(Species) %&gt;%\n                 summarise(n = sum(n)) %&gt;%\n                 arrange(desc(n))\n\nGr5_summary_gt_table &lt;- gt(Gr5_summary) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Species missed outside 5 metres\")\n  )\n\nGr5_summary_gt_table\n\n\n\n\n\n\n\n\nTable 5 : Species missed outside 5 metres\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n4\n\n\nAluta_maisonneuvei\n3\n\n\nAcacia_ligulata\n2\n\n\nAcacia_minyura\n2\n\n\nEremophila_latrobei\n2\n\n\nEremophila_longifolia\n2\n\n\nAcacia sp.\n1\n\n\nAcacia_maitlandii\n1\n\n\nAcacia_melliodora\n1\n\n\nCodonocarpus_cotinifolius\n1\n\n\nDodonea_viscosa\n1\n\n\nEremophila_glabra\n1\n\n\nGrevillea_eriostachya\n1\n\n\nGrevillea_juncifolia\n1\n\n\nGrevillea_stenobotrys\n1\n\n\nHakea_?_lorea\n1\n\n\nSantalum_lanceolatum\n1\n\n\nSenna_artemisiodes\n1\n\n\n\n\n\n\n\nFor species missed within 5 m of the plot centre, 7/12 cases 58.3% were of Triodia schinzii (which could not be distinguished easily from Triodia pungens, especially when sterile). Other species were only missed once. A much greater number of species were missed 5 m to 10 m from the plot centre, most being small shrubs or seedlings, burnt plants that retained no leaf material, or species that are morphologically similar to others in the study area (e.g., Triodia schinzii , Acacia minyura, various Eremophila spp.). Collectively these data suggest that given the resolution of GoPro Max cameras shrubby and smaller species should be recorded within 5 m of the plot centre unless they are morphologically or chromatically distinct (e.g., Allocasuarina descaisneana, Corymbia opaca).\nThe main species recorded in the camera survey but not in the field (within individual plots) included Aluta maisonneuvei, Acacia aneura, and Triodia sp. (spinifex grasses). Acacia aneura is morphologically similar to Acacia minyura, and burnt Aluta maisonneuvei could be mistaken for other shrub species. However, some field survey errors also occurred, particularly where Tridodia spp. were overlooked.\nWe now complete this analysis by determining the field detection rate of plant species recorded across all study plots, later focusing only on widespread species recorded in at least ten plots. For the following analysis we now select only the record ID (plot) and record of each definitively identified species (including the 3 Triodia spp. species lumped) in a plot, where ‘Both’ = species recorded in both field and camera survey lists; ‘CameraOnly’ = species recorded only in camera survey list; ‘FieldOnly’ = species recorded only in field survey list; ‘Absent’ = species not recorded in either field or camera survey data.\n\n\nShow the code\n# take a subset of the species_data\ndataB &lt;- species_data[, c(\"ID\", \"AcacAneu\", \"AlloDeca\", \"Triodiasp\", \"AlutMais\", \"GrevErio\", \"AcacLigu\", \"EucaGamo\", \"DicrGile\", \"AcacPrui\", \"CodoCoti\", \"DodoVisc\", \"GyroTepp\", \"AcacMell\", \"AcacMiny\", \"EucaOxy\", \"NewcSpod\",\"AcacMait\",\"ExocSpar\", \"GrevSten\", \"SanLanc\", \"GrevJunc\", \"SennArte\", \"GyroRamo\", \"AcacAmmo\", \"EremLatr\", \"EremGlab\", \"RhagErem\", \"EremLong\")]\n\n# some data wrangling to produce a pivot table for each species based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\ndataC &lt;- dataB %&gt;%\n         pivot_longer(cols = -ID) %&gt;%\n         count(name, value) %&gt;%\n         pivot_wider(names_from = name, values_from = n, values_fill = list(n = 0))\n\n# transpose the table\nt_dataC &lt;- t(dataC)\n\n#get row and colnames in order\ncolnames(t_dataC) &lt;- rownames(dataC)\nrownames(t_dataC) &lt;- colnames(dataC)\n\n#View(t_dataC)\n# assign the names\ncolnames(t_dataC) &lt;- t_dataC[1, ]\nt_dataC2 &lt;- t_dataC[-1,]\n\n# convert to data frame and add row names as a column\nspecies_counts &lt;- as.data.frame(t_dataC2) %&gt;%\n                  rownames_to_column(var = \"Species\")\n\n#View(species_counts)\n\nspecies_counts_gt_table &lt;- gt(species_counts) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Species counts based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\")\n  )\n\nspecies_counts_gt_table\n\n\n\n\n\n\n\n\nTable 6 : Species counts based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\n\n\nSpecies\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nAcacAmmo\n77\n2\n0\n0\n\n\nAcacAneu\n50\n26\n3\n0\n\n\nAcacLigu\n68\n7\n0\n4\n\n\nAcacMait\n75\n2\n1\n1\n\n\nAcacMell\n77\n0\n0\n2\n\n\nAcacMiny\n73\n5\n0\n1\n\n\nAcacPrui\n78\n1\n0\n0\n\n\nAlloDeca\n59\n20\n0\n0\n\n\nAlutMais\n52\n20\n4\n3\n\n\nCodoCoti\n66\n12\n0\n1\n\n\nDicrGile\n78\n1\n0\n0\n\n\nDodoVisc\n76\n2\n0\n1\n\n\nEremGlab\n77\n0\n0\n2\n\n\nEremLatr\n75\n2\n0\n2\n\n\nEremLong\n77\n2\n0\n0\n\n\nEucaGamo\n71\n8\n0\n0\n\n\nEucaOxy\n76\n2\n0\n1\n\n\nExocSpar\n78\n1\n0\n0\n\n\nGrevErio\n59\n18\n1\n1\n\n\nGrevJunc\n77\n0\n0\n2\n\n\nGrevSten\n76\n2\n0\n1\n\n\nGyroRamo\n78\n1\n0\n0\n\n\nGyroTepp\n77\n2\n0\n0\n\n\nNewcSpod\n75\n3\n1\n0\n\n\nRhagErem\n78\n0\n0\n1\n\n\nSanLanc\n78\n0\n0\n1\n\n\nSennArte\n77\n1\n0\n1\n\n\nTriodiasp\n11\n65\n3\n0\n\n\n\n\n\n\n\nThis provides a list of each species and counts of occurrences in Both, CameraOnly, FieldOnly and Absent categories. We now calculate the camera detection rate for each species based on these data.\n\n\nShow the code\n# first ensure/convert the data to numeric\nspecies_counts$Absent &lt;- as.numeric(as.character(species_counts$Absent))\nspecies_counts$Both &lt;- as.numeric(as.character(species_counts$Both))\nspecies_counts$FieldOnly &lt;- as.numeric(as.character(species_counts$FieldOnly))\nspecies_counts$CameraOnly &lt;- as.numeric(as.character(species_counts$CameraOnly))\n\n\n# next calculate the total and number of valid, positive records of each species, which we assume here are counts that occur in either field surveys or both field surveys and camera surveys (the 'Both' category)\nspecies_counts$Positives &lt;- species_counts$Both +  species_counts$FieldOnly\nspecies_counts$Total &lt;- species_counts$Absent + species_counts$Both +  species_counts$FieldOnly + species_counts$CameraOnly \n\n\n# rank the species by total positive count\nspecies_counts&lt;-species_counts[order(species_counts$Positives,decreasing = TRUE),]\n\n# calcuate the frequency of each species as a percentage occurrence across plots\nspecies_counts$Frequency &lt;- 100*(species_counts$Positives / species_counts$Total)\n\n\n# calculate the percentage of positive occurrences that were captured in the camera survey for each species #\nspecies_counts$CameraDetectionRate &lt;- 100-100*(species_counts$FieldOnly / species_counts$Positives)\n\n\n# reorder the columns for ease of viewing and present the data\nspecies_counts &lt;- species_counts %&gt;%\n                     select(Species, Total, Positives, \n                            Frequency, CameraDetectionRate, \n                            Absent, Both, \n                            CameraOnly, FieldOnly)\n\n\n\nspecies_counts_gt_table &lt;- gt(species_counts) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Counts all species\")\n  ) \n\n\nspecies_counts_gt_table\n\n\n\n\n\n\n\n\nTable 7 : Counts all species\n\n\nSpecies\nTotal\nPositives\nFrequency\nCameraDetectionRate\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nTriodiasp\n79\n65\n82.278481\n100.00000\n11\n65\n3\n0\n\n\nAcacAneu\n79\n26\n32.911392\n100.00000\n50\n26\n3\n0\n\n\nAlutMais\n79\n23\n29.113924\n86.95652\n52\n20\n4\n3\n\n\nAlloDeca\n79\n20\n25.316456\n100.00000\n59\n20\n0\n0\n\n\nGrevErio\n79\n19\n24.050633\n94.73684\n59\n18\n1\n1\n\n\nCodoCoti\n79\n13\n16.455696\n92.30769\n66\n12\n0\n1\n\n\nAcacLigu\n79\n11\n13.924051\n63.63636\n68\n7\n0\n4\n\n\nEucaGamo\n79\n8\n10.126582\n100.00000\n71\n8\n0\n0\n\n\nAcacMiny\n79\n6\n7.594937\n83.33333\n73\n5\n0\n1\n\n\nEremLatr\n79\n4\n5.063291\n50.00000\n75\n2\n0\n2\n\n\nAcacMait\n79\n3\n3.797468\n66.66667\n75\n2\n1\n1\n\n\nDodoVisc\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nEucaOxy\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nGrevSten\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nNewcSpod\n79\n3\n3.797468\n100.00000\n75\n3\n1\n0\n\n\nAcacAmmo\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nAcacMell\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nEremGlab\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nEremLong\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nGrevJunc\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nGyroTepp\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nSennArte\n79\n2\n2.531646\n50.00000\n77\n1\n0\n1\n\n\nAcacPrui\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nDicrGile\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nExocSpar\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nGyroRamo\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nRhagErem\n79\n1\n1.265823\n0.00000\n78\n0\n0\n1\n\n\nSanLanc\n79\n1\n1.265823\n0.00000\n78\n0\n0\n1\n\n\n\n\n\n\n\nNow find species with more than 10 positive records and present them\n\n\nShow the code\n# filter species with more than 10 positive records and present them\nspecies_counts_gr_10 &lt;- species_counts %&gt;%\n                        filter(Positives &gt; 10) %&gt;%\n                        arrange(desc(Positives)) \n\ncounts_gr_10_gt_table &lt;- gt(species_counts_gr_10) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Counts of species in &gt; 10 plots\")\n  )\n\ncounts_gr_10_gt_table\n\n# get the minimum camera detection rate for the first 6 species detected in more than 10 plots\nmin10 &lt;- species_counts_gr_10 %&gt;%\n         slice(1:6) %&gt;%  # Select the first 6 rows\n         summarise(MinCameraDetectionRate = min(CameraDetectionRate, na.rm = TRUE))\n\n#cat(paste0(\"Minimum Camera Detection Rate: \", round(min10, 2)))\n#cat(\"\\n\")\n\n# get the minimum camera detection rate for Acacia ligulata, a species most frequently undetected; for the text below\nAcacLigu_index &lt;- which(species_counts_gr_10$Species == \"AcacLigu\")\nAcli &lt;- min(species_counts_gr_10$CameraDetectionRate[AcacLigu_index])\n\n#cat(paste0(\"Acacia ligulata: \", round(Acli, 2)))\n#cat(\"\\n\")\n\n\n\n\n\n\n\n\nTable 8 : Counts of species in &gt; 10 plots\n\n\nSpecies\nTotal\nPositives\nFrequency\nCameraDetectionRate\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nTriodiasp\n79\n65\n82.27848\n100.00000\n11\n65\n3\n0\n\n\nAcacAneu\n79\n26\n32.91139\n100.00000\n50\n26\n3\n0\n\n\nAlutMais\n79\n23\n29.11392\n86.95652\n52\n20\n4\n3\n\n\nAlloDeca\n79\n20\n25.31646\n100.00000\n59\n20\n0\n0\n\n\nGrevErio\n79\n19\n24.05063\n94.73684\n59\n18\n1\n1\n\n\nCodoCoti\n79\n13\n16.45570\n92.30769\n66\n12\n0\n1\n\n\nAcacLigu\n79\n11\n13.92405\n63.63636\n68\n7\n0\n4\n\n\n\n\n\n\n\nThe objective of this analysis was to determine which species are most easily detected using camera images taken 3.2 m above the ground and in the centre of a 20 m diameter plot. The results show that species differed considerably in camera detectability, with the camera detection rate ranging from 0% to 100% depending on the species. Among common, widespread species or species groups (&gt; 10 positive records or occurrences), Allocasuarina decaisneana, Acacia aneura, the Triodia species group (T. basedowii, T. schinzii, T. pungens), Aluta maisonneuvei, Codonocarpus continifolius, and Grevillea eriostachya were all detected in camera images 87% of the time or more. Only Acacia ligulata, many of which were dead across the study area, was an exception (64%).\nAmong less common species, morphologically distinct species such as Eucalyptus gamophylla and Newcastelia spodiotricha were always successfuly detected, and many other species were a majority of the time.\n\n\nOverall, plot-level species occurrence data were reliably extracted from camera images in this study. There was a strong relationship between species counts based on field survey and camera survey, albeit with a weak tendency for fewer species to be recorded in the camera survey. On average there was 84% agreement between field survey and camera survey species lists, although we note that the overall species diversity in the study area was relatively low, and apart from the large spinifex grasses (Triodia spp.) we did not focus on herbaceous species.\nThe most common species identified in the field survey but missed in the camera survey was Triodia schinzii, and it was not generally possible to distinguish between Triodia schinzii and Triodia pungens, even less than 5 m from the centre of the plot (i.e., where the photo was taken). However, this is true even under field conditions when plants are lacking floral structures. More species, particularly small taxa, seedlings and plants that retained no leaf material or species that co-occured with morphologically similar taxa were sometimes missed 5 m to 10 m from the plot centre. Overall, however, the most common species or species groups all had a camera detection rate of at least 86.96%, as did some less common taxa. Occasionally species were recorded in the camera survey but not the field survey, and since all species were perennial, these cases may be classified as field errors.\n\n\n\nCamera data can be accurately used to generate plot-level species lists at the study site, although fewer species are missed within 5 m of the plot centre. Common and widespread species were all successfully detectable,\nMorphologically distinct species were most easily detectable, and at greater distances from the camera. Morphologically similar species (e.g., spinifex grasses, Eremophila spp.) may need to be lumped together for subsequent analyses,\nReference photographs, ideally taken at different distances from the camera, should be provided for all target species to assist with species identification using the pannotator package,\nThe resolution of the current GoPro Max model may require collection of images closer to certain target taxa. This may involve, for example, collecting images closer to the ground (understory species), in the canopy (morphologically similar canopy taxa), and at multiple levels in both (structurally complex vegetation).\n\n\n\n\n\n\n\n\nThe objective of the following analyses is to investigate the relationship between cover and mortality (dieback) estimates of spinifex (Triodia spp.) grasses across the validation plots in which cover and dieback estimates were generated both by field surveys and by using the pannotator package to score 360-degree images. We are particularly interested in specific size classes (if any) where discrepancies arise, and alterations to scoring methods that might improve accuracy if camera detection methods.\nWe first import the dataset spinifex_validation.csv and create the spinifex_data dataframe. The dataframe contains the following variables:\nColumn [1] (ID) = record identifier; [2] (Plot_NEW) = plot number; [3] (Location) = location of plot along transect (NE, NW, SE, SW corner or extra plot); [4] (Latitude) = latitude in decimal degrees; [5] (Longitude) = longitude in decimal degrees; [6] (Closest_image) = identity of closest 360-degree image (for pannotator annotation);\n[7] (Field_Spinifex_size) = size class of spinifex identified in field survey (classes = 0-30 cm, &gt;30-60, &gt;60-100, &gt;100-200, &gt;200-300, &gt;300-400, &gt;400-500, &gt;500 cm); [8] (Field_Spinifex_Cover) = field estimated cover (%); [9] (Field_Spinifex_%dead) = field percentage of spinifex cover estimate as dead; [10] (Camera_Spinifex_size) = size class of spinifex identified in camera survey; [11] (Camera_Spinifex_Cover) = camera estimated cover (%); [12] (Camera_Spinifex_%dead) = camera percentage of spinifex cover estimate as dead;\n[13] (Cover_Cam_Field_Diff) = difference in cover estimate based on camera cover (%) - field cover (%); [14] (PercDead_Cam_Field_Diff) = difference in percentage of dead cover based on camera_%dead - field_%dead; [15] (Size_classes_field) = number of distinct spinifex size classes observed in plot based on field data; [16] (Size_classes_camera) = number of distinct spinifex size classes observed in plot based on cameradata; [17] (Misclassifications) = number of size classes in a given plot present in both field and camera surveys but differing by one or more size classes; [18] (Missed_classes) = number of size classes in a given plot missed completely in either in field and camera surveys; [19] (ErrorType1) = Error Type 1: ‘Both’ - size class observed in both field and camera surveys, ‘FieldOnly’ - size class observed only in field survey, CameraOnly’ - size class observed only in camera survey; [20] (ErrorType2) = Error Type 2: ‘No Error’ - size class classified the same on field and camera suveys, ‘Misclassed’ - size class misclassified in either field or camera suveys, ‘FieldError’ - error made on field estimate of size class, ‘CameraError’ - error made on camera estimate of size class; [21] (Cat1) = misclassified by one size class category; [22] (Distance) = distance from camera for error : ‘Less5’ - less than 5 m, ‘Great5’ - more than 5 m.\n\n\nShow the code\n# read in the data file. This is the data for species and cover calibration\nspinifex_data &lt;- read_csv(\"./Data_files/spinifex_validation.csv\", show_col_types = FALSE)\n\n\nIn this section we take a similar approach to the evaluation of species identification described above. First we focus on overall plot cover and mortality data. These data are rows with the value of ‘Total’ in the Field_Spinifex_size and Camera_Spinifex_size columns.\n\n\nShow the code\n# subset the data on only those containing \"Total\" plot cover values\nspinifex_plot_total &lt;- spinifex_data[spinifex_data$Field_Spinifex_size == 'TOTAL',]\n\n# confirm the number of plots of spinifex cover data and print the result\ncat(\"The number of rows in the subsetted dataframe is: \", nrow(spinifex_plot_total), \"\\n\")\n\n\nThe number of rows in the subsetted dataframe is:  73 \n\n\nWe will begin by comparing estimates of mean field- and camera-based spinifex cover (the mean across all verification plots), and then the relationship between field- and camera-based spinifex cover.\n\n\nShow the code\n# first ensure the data are numeric \nspinifex_plot_total$Field_Spinifex_Cover &lt;- as.numeric(as.character(spinifex_plot_total$Field_Spinifex_Cover))\nspinifex_plot_total$Camera_Spinifex_Cover &lt;- as.numeric(as.character(spinifex_plot_total$Camera_Spinifex_Cover))\n\n# calculate the mean plot-level spinifex cover using field and camera survey data and print the results\nField_mean_sp &lt;- summary(spinifex_plot_total$Field_Spinifex_Cover)\ncat(\"The summary for mean total spinifex cover across plots based on field survey data is:\\n\")\nprint(Field_mean_sp)\ncat(\"\\n\")\n\nCamera_mean_sp &lt;- summary(spinifex_plot_total$Camera_Spinifex_Cover)\ncat(\"The summary for mean total spinifex cover across plots based on camera image data is:\\n\")\nprint(Camera_mean_sp)\ncat(\"\\n\")\n\n\nThe summary for mean total spinifex cover across plots based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    3.50   13.00   13.15   17.00   46.00 \n\nThe summary for mean total spinifex cover across plots based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    4.50   14.50   14.63   22.50   46.00 \n\n\nField survey and camera survey methods yielded similar mean (13.15% versus 14.63% respectively), maximum and minimum estimates of total plot cover across the entire data set (n = 73 plots). This indicates that overall bias in the two measurement techniques might be small, but it does not mean that predictability at the plot scale is also high. To assess whether field and camera survey techniques yield similar cover estimates at the plot scale we must look further at this relationship. We begin by looking at the correlation between plot-level estimates of total spinifex cover using both techniques (spinifex_plot_total$Field_Spinifex_Cover and spinifex_plot_total$Camera_Spinifex_Cover).\n\n\nShow the code\n# plot the correlation between field cover and camera cover estimates with linear model \nplot(spinifex_plot_total$Field_Spinifex_Cover, spinifex_plot_total$Camera_Spinifex_Cover,\n     main = \"Spinifex cover, field vs camera, linear model\",\n     xlab = \"Total spinifex cover (Field Survey)\",\n     ylab = \"Total spinifex cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 60),  # Set y-axis limits\n     xlim = c(0, 60))  # Set x-axis limits\nabline(lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total), col = \"red\") # add a linear model to the plot\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the linear model statistics\nlinearmodel &lt;- lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, \n                  data=spinifex_plot_total)\n\n# test whether the slope estimate differs from 1, which might indicate a bias towards lower values of camera cover for a given value of field cover\n\n# 1. Get the summary of the model\nmodelsummary &lt;- summary(linearmodel)\ncat(\"Linear model summary of Camera_Spinifex_Cover ~ Field_Spinifex_Cover \\n\")\nprint(modelsummary)\n\n# 2. Get the standard error of the slope\nslope_se &lt;- coef(modelsummary)[\"Field_Spinifex_Cover\", \"Std. Error\"]\ncat(paste0(\"Slope of the standard error: \", slope_se, \"\\n\"))\n\n# 3. Get the slope estimate\nslope_estimate &lt;- coef(modelsummary)[\"Field_Spinifex_Cover\", \"Estimate\"]\ncat(paste0(\"Slope estimater: \", slope_estimate, \"\\n\"))\n\n# 4. Calculate the Z test statistic (how many standard errors away from 1 is the slope estimate)\ntest_statistic &lt;- (slope_estimate - 1) / slope_se\ncat(paste0(\"Z score of the slope estimate: \", test_statistic, \"\\n\"))\n\n# 5. Calculate the p-value for the two-sided test\np_value &lt;- 2 * (1 - pnorm(abs(test_statistic)))\n\n# 6. Print the p-value\ncat(paste0(\"The P value for testing deviation in the slope from 1 is: \", p_value, \"\\n\"))\n\n\nLinear model summary of Camera_Spinifex_Cover ~ Field_Spinifex_Cover \n\nCall:\nlm(formula = Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.915  -3.307  -1.695   3.013  22.555 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           3.30680    1.22624   2.697  0.00874 ** \nField_Spinifex_Cover  0.86105    0.07105  12.119  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.786 on 71 degrees of freedom\nMultiple R-squared:  0.6741,    Adjusted R-squared:  0.6695 \nF-statistic: 146.9 on 1 and 71 DF,  p-value: &lt; 2.2e-16\n\nSlope of the standard error: 0.0710465545046707\nSlope estimater: 0.861045180580407\nZ score of the slope estimate: -1.95582770182694\nThe P value for testing deviation in the slope from 1 is: 0.0504854544045341\n\n\nBoth indicate that field survey cover is strongly related (p &lt; 5.8946282^{-19}) to camera survey cover. The linear model explains 67% of variability in the data, and the test for whether the slope of the relationship (0.86) differs from 1 is marginally significant (p = 0.05), which in this model indicates that camera cover scores may be slightly biased towards lower values than field survey estimates. Visually, however, the relationship appears to be non-linear, with stronger bias at higher values of field survey cover. Next we do a very simple investigation of this possible bias using a second-order polynomial function.\n\n\nShow the code\n# generate a simple second-order polynomial to capture the possible decrease in camera cover estimate at higher values of field cover estimate\npoly2model &lt;- lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover + I(Field_Spinifex_Cover^2), data = spinifex_plot_total)\n\n# generate a sequence of values spanning the range of Field_Spinifex_Cover\nnewdata &lt;- data.frame(Field_Spinifex_Cover = seq(min(spinifex_plot_total$Field_Spinifex_Cover), max(spinifex_plot_total$Field_Spinifex_Cover), length.out = 100))\n\n# use the model to predict Camera_Spinifex_Cover for these values\nnewdata$Camera_Spinifex_Cover &lt;- predict(poly2model, newdata)\n\n# plot the predictions\nplot(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total,\n     main = \"Spinifex cover, field vs camera, polynomial model\",\n     xlab = \"Total spinifex cover (Field Survey)\",\n     ylab = \"Total spinifex cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 60),  # Set y-axis limits\n     xlim = c(0, 60))  # Set x-axis limits)\nlines(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = newdata, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the second order polynomial model statistics\na2 &lt;- summary(poly2model)\ncat(\"Summary of polynomial model: \\n\")\nprint(a2)\ncat(\"\\n\")\n\n# calculate AIC for both models\naicl &lt;- aic_linearmodel &lt;- AIC(linearmodel)\naicp &lt;- aic_poly2model &lt;- AIC(poly2model)\n\n# print the AIC values\ncat(paste0(\"AIC for linearmodel: \", aic_linearmodel, \"\\n\"))\ncat(paste0(\"AIC for poly2model: \", aic_poly2model, \"\\n\"))\n\n# get the model adjusted R squared\nR2 &lt;- a2$adj.r.squared\n\ncat(\"The model adjusted R^2 is: \", R2, \"\\n\")\n\n\nSummary of polynomial model: \n\nCall:\nlm(formula = Camera_Spinifex_Cover ~ Field_Spinifex_Cover + I(Field_Spinifex_Cover^2), \n    data = spinifex_plot_total)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.8427  -3.3427  -0.5873   2.2686  20.3047 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                0.587326   1.414317   0.415  0.67921    \nField_Spinifex_Cover       1.410770   0.179514   7.859 3.32e-11 ***\nI(Field_Spinifex_Cover^2) -0.015139   0.004591  -3.297  0.00154 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.358 on 70 degrees of freedom\nMultiple R-squared:  0.7179,    Adjusted R-squared:  0.7099 \nF-statistic: 89.09 on 2 and 70 DF,  p-value: &lt; 2.2e-16\n\n\nAIC for linearmodel: 490.696986792716\nAIC for poly2model: 482.157066085602\nThe model adjusted R^2 is:  0.7098859 \n\n\nThe second order parameter explains a significant proportion of the data (p = 0.0015353) and the model adjusted R2 is slightly higher than the linear model (0.71). The lower AIC criterion for the polynomial model (490.7 vs. 482.16) also suggests that it provides a better fit to the relationship between field and camera cover estimates. Evaluation of the graphical relationship suggests that any bias towards lower camera cover scores occurs at field survey cover estimates of &gt;30%, which is only a small minority of plots.\nWe now consider more closely the magnitude of differences in plot-level estimates of spinifex cover based on field survey and camera survey methods. The variable of interest is spinifex_plot_total$Cover_Cam_Field_Diff which is the difference in total cover between the camera cover estimate (TCcam) and the field cover estimate (TCfield); ie. Cover_Cam_Field_Diff = TCcam - TCfield (the two variables being spinifex_plot_total$Camera_Spinifex_Cover and spinifex_plot_total$Field_Spinifex_Cover).\n\n\nShow the code\n# determine the mean difference in plot level field and camera cover estimates\na &lt;- summary(spinifex_plot_total$Cover_Cam_Field_Diff)\ncat(\"The summary for mean cover difference based on all data is:\\n\")\nprint(a)\ncat(\"\\n\")\n\n# create the histogram:\nhist_data_all &lt;- hist(spinifex_plot_total$Cover_Cam_Field_Diff,\n                      breaks = seq(-50, 50, by = 5),\n                      main = \"Histogram of cover estimate differences\",\n                      xlab = \"Cover difference %\",\n                      ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for mean cover difference based on all data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-19.000  -1.000   0.000   1.479   4.000  23.500 \n\n\n\n\nShow the code\n# determine the difference for only plots that contain Triodia (i.e., excluding plots with zero spinifex cover in both field and camera surveys)\nspinifex_plot_total_gr0 &lt;- subset(spinifex_plot_total, Field_Spinifex_Cover &gt; 0 | Camera_Spinifex_Cover &gt; 0)\n\nb &lt;- summary(spinifex_plot_total_gr0$Cover_Cam_Field_Diff)\ncat(\"The summary for mean cover difference based on only plots containing spinifex is:\\n\")\nprint(b)\ncat(\"\\n\")\n\n# create the histogram\nhist_data_gr0 &lt;- hist(spinifex_plot_total_gr0$Cover_Cam_Field_Diff,\n                      breaks = seq(-50, 50, by = 5),\n                      main = \"Histogram of cover estimate differences \\n(plots containing spinifex)\",\n                      xlab = \"Cover difference %\",\n                      ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for mean cover difference based on only plots containing spinifex is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-19.000  -1.500   0.000   1.742   5.375  23.500 \n\n\nThe data confirm that differences in total spinifex cover estimates based on field survey and camera survey data are tightly clustered near a mean of zero and an approximately normal distribution. Differences can be as large as 20% but the majority are in the range of -10% to +10%.\nWe must now also consider differences in the percentage of spinifex cover that is dead (suffering recent mortality/dieback). Here we provide an abbreviated analysis based on key results.\n\n\nShow the code\nField_mean &lt;- summary(spinifex_plot_total$`Field_Spinifex_%dead`)\ncat(\"The summary for mortality (% dead cover) across all plots based on field survey data is:\\n\")\nprint(Field_mean)\ncat(\"\\n\")\n\nCamera_mean &lt;- summary(spinifex_plot_total$`Camera_Spinifex_%dead`)\ncat(\"The summary for mortality (% dead cover) across all plots based on camera image data is:\\n\")\nprint(Camera_mean)\ncat(\"\\n\")\n\n\nThe summary for mortality (% dead cover) across all plots based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    0.10   10.14   25.64   47.44  100.00      11 \n\nThe summary for mortality (% dead cover) across all plots based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   4.364  24.773  29.968  45.903 100.000      11 \n\n\nThe means and spread of data are similar.\n\n\nShow the code\n# plot the relationship between mortality (%dead) estimates from both field and camera surveys\nplot(spinifex_plot_total$`Field_Spinifex_%dead`, spinifex_plot_total$`Camera_Spinifex_%dead`,\n     main = \"Percent dead cover, field vs camera, linear model\",\n     xlab = \"Percent dead cover (Field Survey)\",\n     ylab = \"Percent dead cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 100),  # Set y-axis limits\n     xlim = c(0, 100))  # Set x-axis limits\nabline(lm(`Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, data = spinifex_plot_total), col = \"red\") # add a linear model to the plot\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the linear model statistics\nlinearmodel &lt;- lm(`Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, data = spinifex_plot_total)\na3 &lt;- summary(linearmodel)\ncat(\"Summary of the linear model: Camera_Spinifex_%dead ~ Field_Spinifex_%dead \\n\")\nprint(a3)\ncat(\"\\n\")\n\n# print the  P value of the model\npvalue &lt;- a3$coefficients[2,4]\ncat(\"The P value of the model is: \", pvalue, \"\\n\")\n\n\nSummary of the linear model: Camera_Spinifex_%dead ~ Field_Spinifex_%dead \n\nCall:\nlm(formula = `Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, \n    data = spinifex_plot_total)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.622 -10.594  -6.637   8.417  89.406 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            10.59406    3.18337   3.328   0.0015 ** \n`Field_Spinifex_%dead`  0.75574    0.08101   9.329 2.77e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 19 on 60 degrees of freedom\n  (11 observations deleted due to missingness)\nMultiple R-squared:  0.5919,    Adjusted R-squared:  0.5851 \nF-statistic: 87.03 on 1 and 60 DF,  p-value: 2.772e-13\n\n\nThe P value of the model is:  2.771671e-13 \n\n\nThe linear model is highly significant (p = 2.7716709^{-13})), and explains 59% of variation in the data. We now look at the spread in the data:\n\n\nShow the code\n# create the histogram\nhist_data &lt;- hist(spinifex_plot_total$PercDead_Cam_Field_Diff,\n                  breaks = seq(-100, 100, by = 10),\n                  main = \"Histogram of differences in mortality estimates\",\n                  xlab = \"Difference in estimated mortality (%)\",\n                  ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe data are again centrally distributed with a mean near zero, but the spread in the data are larger than for live cover. The majority of errors are between -20% to +20%, but some estimates vary by up to ca. 50-60%.\n\n\n\nThe object of the following analyses is to investigate differences in classification among size classes within plots. First we consider differences in the mean number of size classes per plot based on the field and camera data, along with the number of misclassified size classes (one size class category differences) and missed classes (size classes present in either field or camera data but not both).\n\n\nShow the code\nSCField_mean &lt;- summary(spinifex_plot_total$Size_classes_field)\ncat(\"Summary - number of spinifex size classes per plot based on field survey data:\\n\")\nprint(SCField_mean)\ncat(\"\\n\")\n\nSCCamera_mean &lt;- summary(spinifex_plot_total$Size_classes_camera)\ncat(\"Summary - number of spinifex size classes per plot based on camera survey data:\\n\")\nprint(SCCamera_mean)\ncat(\"\\n\")\n\nSCMisclass_mean &lt;- summary(spinifex_plot_total$Misclassifications)\ncat(\"Summary - spinifex size class misclassifications per plot:\\n\")\nprint(SCMisclass_mean)\ncat(\"\\n\")\n\nSCMissed_class_mean &lt;- summary(spinifex_plot_total$Missed_classes)\ncat(\"Summary - number of spinifex size classes missed per plot in either survey:\\n\")\nprint(SCMissed_class_mean)\ncat(\"\\n\")\n\n\nSummary - number of spinifex size classes per plot based on field survey data:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   1.000   2.000   1.958   3.000   5.000       1 \n\nSummary - number of spinifex size classes per plot based on camera survey data:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   1.000   2.000   2.083   3.000   5.000       1 \n\nSummary - spinifex size class misclassifications per plot:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3226  1.0000  2.0000      11 \n\nSummary - number of spinifex size classes missed per plot in either survey:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3226  1.0000  2.0000      11 \n\n\nOverall, the mean number of spinifex size classes per plot recorded in field (1.96) and camera (2.08) data were very similar, and the mean number of misclassifications (0.32) and missed size class categories (0.32) were both very low.\nWe now generate a new dataframe that contains cover and mortality data for all size classes in each plot, removing plot totals. We then determine the number of occasions in which a given spinifex size class was observed in both field and camera data (Both), or in only field (FieldOnly) or camera (CameraOnly) data.\n\n\nShow the code\n# Count occurrences of each ErrorType1 for non-TOTAL Field_Spinifex_size\nsize_class_data &lt;- spinifex_data %&gt;%\n                   filter(Field_Spinifex_size != \"TOTAL\", \n                          ErrorType1 %in% c(\"Both\", \"CameraOnly\", \"FieldOnly\")) %&gt;%\n                   count(ErrorType1, sort = TRUE)\n\n#View(size_class_data)\n\nsize_class_data_gt_table &lt;- gt(size_class_data) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data\")\n  )\n\nsize_class_data_gt_table\n\n# Calculate total counts and percentages for each error type\ncounttotal &lt;- sum(size_class_data$n)\npcnt_both &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"Both\"] / counttotal),2)\npcnt_camera &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"CameraOnly\"] / counttotal),2)\npcnt_field &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"FieldOnly\"] / counttotal),2)\n\n#print(paste0(\"Percent in both: \", pcnt_both))\n#print(paste0(\"Percent in camera: \", pcnt_camera))\n#print(paste0(\"Percent in field: \", pcnt_field))\n\n\n\n\n\n\n\n\nTable 9 : Spinifex size class data\n\n\nErrorType1\nn\n\n\n\n\nBoth\n123\n\n\nCameraOnly\n30\n\n\nFieldOnly\n22\n\n\n\n\n\n\n\nThe data show that 70.3% of spinifex size classes were recorded in both Camera and Field surveys, while 29.7% occurred only in one survey. Of these, more were recorded only in the camera survey (n = 30) than in the field survey (n = 22).\nWe now look at how these differences are distributed through spinifex size classes. In this study we used the following size classes: 0-30 cm, &gt;30-60, &gt;60-100, &gt;100-200, &gt;200-300,&gt;300-400, &gt;400-500, &gt;500cm.\n\n\nShow the code\n# first reorder the size classes from smallest to largest\nlevels_order &lt;- c(\"0-30\", \"&gt;30-60\", \"&gt;60-100\", \"&gt;100-200\", \"&gt;200-300\", \"&gt;300-400\" , \"&gt;400-500\", \"&gt;500\")\n\n# convert Field_Spinifex_size to a factor and specify the order of the levels \nspinifex_data$Camera_Spinifex_size &lt;- factor(spinifex_data$Camera_Spinifex_size, levels = levels_order)\n\n# display the data\ncross_matrix &lt;- as.data.frame.matrix(table(spinifex_data$Camera_Spinifex_size, spinifex_data$ErrorType1)) %&gt;%\n  rownames_to_column(var = \"Size class\") %&gt;%\n  arrange(factor(`Size class`, levels = levels_order))\n\ngt_table &lt;- gt(cross_matrix) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data & error type 1\")\n  )\n\ngt_table\n\n\n\n\n\n\n\n\nTable 10 : Spinifex size class data & error type 1\n\n\nSize class\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\n0-30\n32\n9\n2\n\n\n&gt;30-60\n34\n4\n5\n\n\n&gt;60-100\n30\n8\n1\n\n\n&gt;100-200\n18\n3\n8\n\n\n&gt;200-300\n9\n3\n5\n\n\n&gt;300-400\n0\n1\n0\n\n\n&gt;400-500\n0\n2\n0\n\n\n&gt;500\n0\n0\n1\n\n\n\n\n\n\n\nThere appears to be a tendency for smaller size classes to be recorded solely on camera images and the largest size classes to be recorded only in the field surveys.\nWe then attempted to determine, by comparing field notes and camera data, where these discrepancies occurred. Here, errors were classified according to: Camera error: the size class was present but definitely missed in the camera survey, Field error: the size class was present but definitely missed in the field survey, or Misclassified : the size class was seen in both but allocated to different size classes.\n\n\nShow the code\n# Define the order of levels\nlevels_order &lt;- c(\"0-30\", \"&gt;30-60\", \"&gt;60-100\", \"&gt;100-200\", \"&gt;200-300\", \"&gt;300-400\", \"&gt;400-500\", \"&gt;500\")\n\n# Ensure the Field_Spinifex_size column is a factor with the specified order\nspinifex_data$Field_Spinifex_size &lt;- factor(spinifex_data$Field_Spinifex_size, levels = levels_order)\n\n# Create the cross matrix and order it according to levels_order\ncross_matrix2 &lt;- as.data.frame.matrix(table(spinifex_data$Field_Spinifex_size, spinifex_data$ErrorType2)) %&gt;%\n  rownames_to_column(var = \"Size class\") %&gt;%\n  arrange(factor(`Size class`, levels = levels_order))\n\n\n# generate the cross matrix table\ncross_matrix2 &lt;- as.data.frame.matrix(table(spinifex_data$Field_Spinifex_size, spinifex_data$ErrorType2)) %&gt;%\n  rownames_to_column(var = \"Size class\")\n\n\nsize_class_gt_table &lt;- gt(cross_matrix2) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data & error type 2\")\n  )\n\nsize_class_gt_table\n\n# Count the number of different error types and do not sort them\nError2_summary &lt;- spinifex_data %&gt;%\n                   count(ErrorType2, sort = TRUE)\n\n# #Extract counts by category name\nCamerror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"CameraError\")]\nFielderror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"FieldError\")]\nMiserror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"Misclassed\")]\nNo_error &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"No Error\")]\nTotal &lt;- sum(Error2_summary$n)\n\n# Optionally, you can print the counts for verification\n# cat(\"Camera Errors: \", Camerror, \"\\n\")\n# cat(\"Field Errors: \", Fielderror, \"\\n\")\n# cat(\"Misclassified: \", Miserror, \"\\n\")\n# cat(\"No Errors: \", No_error, \"\\n\")\n# cat(\"Total: \", Total, \"\\n\")\n\n\n\n\n\n\n\n\nTable 11 : Spinifex size class data & error type 2\n\n\nSize class\nCameraError\nFieldError\nMisclassed\nNo Error\n\n\n\n\n0-30\n2\n6\n3\n32\n\n\n&gt;30-60\n4\n3\n2\n34\n\n\n&gt;60-100\n0\n3\n6\n30\n\n\n&gt;100-200\n3\n1\n7\n18\n\n\n&gt;200-300\n2\n1\n5\n9\n\n\n&gt;300-400\n0\n0\n1\n0\n\n\n&gt;400-500\n0\n1\n1\n0\n\n\n&gt;500\n0\n0\n1\n0\n\n\n\n\n\n\n\nThe validation data show that specific size classes were missed in either the camera survey (4 % of cases) or the field survey (6 % of cases), which indicates that camera surveys were actually more reliable in some circumstances than field surveys. In another 26 cases (10 %) size classes were simply misclassified by one size class category.\n\n\n\nOverall, analysis of the validation data set suggests that spinifex cover and mortality data extracted from 360-degree images performs well when compared with data collected during field surveys. This was true even given the large size of the plots (20 m diameter) and the fact that only one image was taken in the centre of each plot. Over a large sample of plots the mean plot-level cover and mortality rate (percentage of dead material) using both techniques were very similar and had errors that were approximately normally distributed with a mean of near zero, indicating minimal bias using camera images for data collection. Generally, plot-level cover estimates varied by ~ +10% to -10%, and percentage mortality estimates by ~ +20% to -20%, although differences in a small minority of plots were larger. On average, the mean number of spinifex size classes per plot was extremely similar based in field data and camera data, and far in excess of the number of misclassified or missed size classes.\nAt the plot level, we used a fine-grained cover size scale (8 classes), particularly for tussocks &lt;1m across (0-30 cm, &gt;30-60 cm, and &gt;60-100cm). Despite this, 70% of size classes were correctly identified in both camera and field survey data. A further 9% were only identified in camera data, due to field errors in data collection, thus ~80% of size classes were correctly identified using camera surveys. The remaining discrepancies were due to size class estimates developed using camera and field survey techniques differing by a single size class. There was a weak tendency for smaller size classes to be recorded solely in camera images and the largest size classes to be recorded only in the field surveys.\nCollectively, we draw four conclusions from these data:\n1) Mean cover and percent mortality estimates for spinifex grasses across plots based on camera images were very similar to those based on field survey data, and there was no directional biases in cover and dieback differences. Therefore, for large samples, mean estimates for both parameters using camera images are likely to be accurate.\n2) At the within-plot level, camera and field survey approaches yielded similar numbers of size classes per plot, and, overall, the number of size classes misclassified or missed completely was small. Overall, about 80% of specific size classes identified using camera surveys were either verified by field data or were correct when field data were incorrect. About 6% of size classes were definitely due to errors in data collected from 360-degree images. Thus, camera surveys generate data at least, or possibly slightly better than, field surveys based on visual cover and dieback estimates.\n3) These data and the obvious relationship between the size classes of spinifex present in a given area and fire history (see accompanying paper) indicate that 360-degree images are a reliable source of cover and dieback data. However, the discrepancies among size class data estimates indicate that there is still room for improvement. Therefore, for the transect study reported in the accompanying paper we decide to undertake the following changes:\na) reduce the size of the study plot from 20 m to 10 m diameter, where camera images are most useful,\nb) overlay plot boundaries and cover estimate markers onto 360-degree images, and\nc) develop help files that contain images in which cover and dieback estimates were determined with a very high degree of accuracy using the ImageJ software package.\nUltimately, at the 10 m diameter scale spinifex cover and dieback estimates are likely to be as good or better than those developed using standard visual field survey estimates. We recommend that all studies collect similar verification data, and carefully consider optimal camera positioning for different taxa and ecological situations. Calibration or validation studies may benefit from even more intensive field survey techniques, for example line intercept or point-based sampling. Ultimately, however, it is our belief that cover or dieback estimates generated using imaging software (such as ImageJ), while time-consuming to collect without automation, will ultimately be far more accurate than those generated using even more intensive field survey estimates.\n\n\n\n\nThe objective of the following analyses is to investigate variation in crown health and size class data for desert oak (Allocasuarina decaisneana) extracted from camera images by three different scorers using the pannotator package. Inter-observer variability is a problem in many scientific disciplines and our intention was to determine the scoring protocols and help files that minimise these differences.\nHere we compare three scorers: 1) one present at the time when images were collected in cameras and is familiar with the study site and associated vegetation (scorer 1), 2) two with no experience at the study site or in scoring crown health (scorers 2-3). Scorer 1 had access to a rudimentary help file (fewer images), a less refined size class scoring system (no seedling size class), and a single worked example for calculating the crown health score. All camera images were collected from the 4 km-long transect that forms the basis of the study reported in this accompanying paper.\nWe first import the required datasets: scorer_oak_1.csv, scorer_oak_2.csv, and scorer_oak_3.csv.\nEach dataframe contains the following variables:\nColumn [1] (user) = scorer number; [2] (timestamp) = image timestamp, [3] (leaflet_id) = leaflet ID; [4] (imagefile) = related image file name; [5] (feature_type) = feature type (marker or image marker); [6] (radius) = radius geometry (not applicable); [7] (geometry) = geometry in Well-Known Text (WKT) format; [8] (species) = species name & size/impact class as per dropdown menu; [9] (Size_class) = Size class (seedling, juvenile, early pole, late pole, early mature, mature); [10] (veg_layer) = vegetation level, here Allocasuarina decaisneana = tree; [11-13] (dd1-dd3) = crown health estimate components; [14] (plot) = image plot; [15] (plot_name_new) = plot names assigned in study ; [16] (frame) = frame of video image file was taken from.\n\n\n\n\nShow the code\n# read in the annotation files\nscorer_1 &lt;- read.csv(\"./Data_files/scorer_oak_1.csv\")\nscorer_2 &lt;- read.csv(\"./Data_files/scorer_oak_2.csv\")\nscorer_3 &lt;- read.csv(\"./Data_files/scorer_oak_3.csv\")\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_1 &lt;- st_as_sf(scorer_1, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_1, width = \"100%\", na.rm = TRUE)\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_2 &lt;- st_as_sf(scorer_2, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_2, width = \"100%\", na.rm = TRUE)\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_3 &lt;- st_as_sf(scorer_3, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_3, width = \"100%\", na.rm = TRUE)\n\n\nThese maps confirm that data for each of the scorers was collected from the same transect at Uluru-Kata Tjuta NP.\n\n\n\nCrown health is simply defined as Crown Health Score = dd1 x dd2 x dd3; values range from 100 (perfect health) to 0 (dead). Here dd1 = the assessable crown (AC, as a percentage of the potential crown that contains live or dead tertiary branches or smaller), dd2 = the crown extent (CE, which is the percentage of the assessable crown that contains leaves), and dd3 = the crown density (CD; the percentage of skylight blocked by leaves within the crown extent). AC, CE and CD were assigned percentages using the scale SHC= 0, &gt;0-5, &gt;5-20, &gt;20-35, &gt;35-50, &gt;50-65, &gt;65-80, &gt;80-95, &gt;95-&lt;100, 100%, and scale midpoints used for calculations. Further details and examples are provided in the accompanying paper and Supporting Information 6).\n\n\nShow the code\n# replace all -999 values (used to signify NA) with zero. The calculation works since when dd2 or dd3 contain -999 the previous dd variable is necessarily zero.\nscorer_1$dd3 &lt;- replace(scorer_1$dd3, scorer_1$dd3 == -999, 0)\nscorer_2$dd3 &lt;- replace(scorer_2$dd3, scorer_2$dd3 == -999, 0)\nscorer_3$dd3 &lt;- replace(scorer_3$dd3, scorer_3$dd3 == -999, 0)\n\nscorer_1$dd2 &lt;- replace(scorer_1$dd2, scorer_1$dd2 == -999, 0)\nscorer_2$dd2 &lt;- replace(scorer_2$dd2, scorer_2$dd2 == -999, 0)\nscorer_3$dd2 &lt;- replace(scorer_3$dd2, scorer_3$dd2 == -999, 0)\n\n# develop a function to calculate Crown health scores in each dataframe and then reorder the size classes. Reordering the size classes is necessary for creating plots below\ncalculate_scores &lt;- function(df) {\n  df$Crown_score &lt;- df$dd1/100 * df$dd2/100 * df$dd3/100\n  df$Size_class_Reorder &lt;- factor(df$Size_class, c(\"Seedling\", \"Juvenile\", \"Early_Pole\", \"Late_Pole\", \"Early_Mature\", \"Mature\"))\n  return(df)\n}\n\n# use above function on scorer_1, scorer_2 and scorer_3\nscorer_1 &lt;- calculate_scores(scorer_1)\nscorer_2 &lt;- calculate_scores(scorer_2)\nscorer_3 &lt;- calculate_scores(scorer_3)\n\n\nNow we can compare mean crown health scores across different scorers.\n\n\nShow the code\n# function to calculate mean crown scores in each size class\nmean_and_count_table &lt;- function(data, score_col, size_col, scorer_name) {\n  mean_table &lt;- data %&gt;%\n    group_by(!!sym(size_col)) %&gt;%\n    summarize(\n      mean = mean(!!sym(score_col), na.rm = TRUE),\n      count = n()\n    ) %&gt;%\n    mutate(Scorer = scorer_name) %&gt;%\n    rename(Category = !!sym(size_col))\n  \n  return(mean_table)\n}\n\n\ntable_scorer_1 &lt;- mean_and_count_table(scorer_1, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 1\")\n\n#View(table_scorer_1)\n\ntable_scorer_2 &lt;- mean_and_count_table(scorer_2, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 2\")\n\n#View(table_scorer_2)\n\ntable_scorer_3 &lt;- mean_and_count_table(scorer_3, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 3\")\n\n#View(table_scorer_3a)\n\ncombined_table &lt;- rbind(table_scorer_1, table_scorer_2, table_scorer_3)\n\n#View(combined_table)\n\nreshaped_table &lt;- combined_table %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove the sf geometry\n  gather(key = \"Statistic\", value = \"Value\", -Category, -Scorer) %&gt;%\n  unite(\"Scorer_Statistic\", Scorer, Statistic, sep = \"_\") %&gt;%\n  spread(key = \"Scorer_Statistic\", value = \"Value\")\n\n# Print the reshaped table using gt\n\nscorers_gt_table &lt;- gt(reshaped_table) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Crown scores from different scorers\")\n  )\n\nscorers_gt_table\n\n# we also get the mean crown health score for each scorer\ns1mean &lt;- summary(scorer_1$Crown_score)\n#print(s1mean)\ns2mean &lt;- summary(scorer_2$Crown_score)\n#print(s2mean)\ns3mean &lt;- summary(scorer_3$Crown_score)\n#print(s3mean)\n\n\n\n\n\n\n\n\nTable 12 : Crown scores from different scorers\n\n\nCategory\nScorer 1_count\nScorer 1_mean\nScorer 2_count\nScorer 2_mean\nScorer 3_count\nScorer 3_mean\n\n\n\n\nSeedling\nNA\nNA\n4\n0.2437500\n2\n0.3625000\n\n\nJuvenile\n9\n0.6034549\n19\n0.3264803\n26\n0.5147356\n\n\nEarly_Pole\n7\n0.5332500\n16\n0.6268896\n13\n0.6940385\n\n\nLate_Pole\n4\n0.5954453\n35\n0.5449272\n25\n0.6838250\n\n\nEarly_Mature\n25\n0.5206769\n52\n0.4669056\n38\n0.6420189\n\n\nMature\n51\n0.4164403\n20\n0.5977703\n31\n0.6274970\n\n\n\n\n\n\n\nThese data indicate that crown health scores were similar for scorers 1 (0.477) and 2 (0.497) but about 0.1 units higher for scorer 3 (0.623), mainly due to a lack of low-scoring trees. Scores for pole- and mature-sized trees were generally consistent across the three scorers, although again scores provided by scorer 3 tended to be higher than those provided by the other scorers. Scores differed in seedling and juvenile classes, although the number of individuals used to determine these scores varied significantly. Data provided by scorer 1 indicated that smaller seedlings (&lt;1 m tall) needed to be separated from juveniles (1- 4 m tall), and that a greater range of visual examples of all size classes was required in the help files. Incorporation of these changes greatly improved the agreement across size classes by scorers 2 and 3.\nNow we want to determine whether the spatial structure of size class and crown health data differed significantly among scorers. Maps are visualised using mapview and images saved using the ‘mapshot’ function.\n\n\n\n\n\nShow the code\nscorer_1 &lt;- st_as_sf(scorer_1, wkt = \"geometry\",crs = 4326)\n\ns1_p &lt;- mapview(scorer_1, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE, basemaps = c(\"Esri.WorldImagery\"))\n\n#print(s1_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns1_q &lt;- mapview(scorer_1, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s1_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_1, scorer_1$Size_class == \"Mature\" | scorer_1$Size_class == \"Early_Mature\")\n\ns1_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s1_z)\n\n\n\n\n\n\n\nShow the code\nscorer_2 &lt;- st_as_sf(scorer_2, wkt = \"geometry\",crs = 4326)\n\ns2_p &lt;- mapview(scorer_2, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE)\n\n#print(s2_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns2_q &lt;- mapview(scorer_2, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s2_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_2, scorer_2$Size_class == \"Mature\" | scorer_2$Size_class == \"Early_Mature\")\n\ns2_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s2_z)\n\n\n\n\n\n\n\nShow the code\ns3_p &lt;- mapview(scorer_3, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE)\n\n#print(s3_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns3_q &lt;- mapview(scorer_3, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s3_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_3, scorer_3$Size_class == \"Mature\" | scorer_3$Size_class == \"Early_Mature\")\n\ns3_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s3_z)\n\n\n\n\n\nNow we can compare the scorers side by side. First size classes:\n\n\nShow the code\n# Synchronize map views in html version\n# sync(s1_p@map %&gt;%\n#     addControl(html = \"Scorer 1\", position = \"bottomright\"),\n#     s2_p@map %&gt;%\n#     addControl(html = \"Scorer 2\", position = \"bottomright\"),\n#     s3_p@map %&gt;%\n#     addControl(html = \"Scorer 3\", position = \"bottomright\"))\n\n\nNow crown scores:\n\n\nShow the code\n# sync(s1_q@map %&gt;%\n#     addControl(html = \"Scorer 1\", position = \"bottomright\"),\n#     s2_q@map %&gt;%\n#     addControl(html = \"Scorer 2\", position = \"bottomright\"),\n#     s3_q@map %&gt;%\n#     addControl(html = \"Scorer 3\", position = \"bottomright\"))\n\n\nNow mature only:\n\n\nShow the code\n# sync(s1_z@map %&gt;%\n#     addControl(html = \"Scorer 1 - Mature\", position = \"bottomright\"),\n#     s2_z@map %&gt;%\n#     addControl(html = \"Scorer 2 - Mature\", position = \"bottomright\"),\n#     s3_z@map %&gt;%\n#     addControl(html = \"Scorer 3 - Mature\", position = \"bottomright\"))\n\n\nFor convenience maps for size class and crown score have been compiled into single .png file:\nComparison of desert oak size class and crown health scores for 3 scorers. Examples of areas recently burnt (Burnt) and not recently burnt (Unburnt) are provided in the top left panel. In the top right panel F = areas apparently impacted severely by fire, D = areas not or minimally affected by fire, likely impact caused by drought.\n\n\n\n\nThe data presented here indicate that all scorers generally produced broadly similar mean crown scores across the whole transect (0.48-0.62) and across size classes. They also produced a comparable spatial distribution for these variables, with similar patches of low crown health identified by each of the scorers (right panels above). The majority of desert oaks with low crown health occurred in parts of the transect that had been recently burnt in hot fires, although there were a few isolated patches that may have been caused by drought (e.g., near the dunes in the north of the western transect; top right panel above). These results indicate that collection and analysis of 360-degree images can be a useful method for mapping differences in crown health and then using these data to infer the role of different drivers of crown health at small to large spatial scales.\nScoring consistency was improved by providing enhanced help material to identify different size classes, splitting smaller trees into ‘seedling’ and ‘juvenile’ size classes, and providing more representative images of the crown health scoring protocol (including the assessable crown (AC), the crown extent (CE), and the crown density (CD). Inter-scorer variation is a common problem in studies that rely on semi-quantitative or qualitative scales, and these would benefit from developing a set of scores by multiple scorers for a common set of images. The pannotator package makes this a simple process, as shown in this example."
  },
  {
    "objectID": "pannotator_data_validation.html#data-sources",
    "href": "pannotator_data_validation.html#data-sources",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "The species and cover analyses conducted below are based on data collected from a series of validation plots (20 m diameter) located on the edges or corners of square transects that measure 1 km on each side. The plots were established across Uluru-Kata Tjuta National Park to capture variation in landforms and vegetation across the Park. Crown data for desert oak (Allocasuarina decaisneana) were extracted from 360-degree images collected along the main 4 km long study transect centred on S 25.35 degrees, W 130.72 degrees (see accompanying paper)."
  },
  {
    "objectID": "pannotator_data_validation.html#install-the-necessary-packages-for-all-code-below",
    "href": "pannotator_data_validation.html#install-the-necessary-packages-for-all-code-below",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "Attaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ purrr     1.0.2\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ data.table::between() masks dplyr::between()\n✖ dplyr::filter()       masks stats::filter()\n✖ data.table::first()   masks dplyr::first()\n✖ lubridate::hour()     masks data.table::hour()\n✖ lubridate::isoweek()  masks data.table::isoweek()\n✖ dplyr::lag()          masks stats::lag()\n✖ data.table::last()    masks dplyr::last()\n✖ lubridate::mday()     masks data.table::mday()\n✖ lubridate::minute()   masks data.table::minute()\n✖ lubridate::month()    masks data.table::month()\n✖ lubridate::quarter()  masks data.table::quarter()\n✖ lubridate::second()   masks data.table::second()\n✖ purrr::transpose()    masks data.table::transpose()\n✖ lubridate::wday()     masks data.table::wday()\n✖ lubridate::week()     masks data.table::week()\n✖ lubridate::yday()     masks data.table::yday()\n✖ lubridate::year()     masks data.table::year()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "pannotator_data_validation.html#plant-species-data",
    "href": "pannotator_data_validation.html#plant-species-data",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "All woody plant species (subshrubs &lt; 50 cm tall, shrubs &gt;= 50 cm tall and trees) along with species of Triodia (spinifex grasses) were identified inside 79 validation plots (20 m diameter) during field surveys conducted in August 2022. Here we read in the .csv file and create the R dataframe ‘species_data’.\nThe dataframe ‘species_data’ contains the following variables:\nColumn [1] (ID) = record identifier; [2] (Plot) = plot number, [3] (Location) = location of plot along transect (NE, NW, SE, SW corner or extra plot); [4] (Latitude) = latitude in decimal degrees; [5] (Longitude) = longitude in decimal degrees; [6] (Closest_image) = identity of closest 360-degree image (for pannotator annotation); [7] (Camera_d_to_plot) = approximate distance (m) from camera image centre to survey plot centre; [8] (No_Field_species) = number of species identified in field survey; [9] (No_Camera_species) = number of species identified in camera survey; [10] (In_field_not_camera) = number of species unique to field survey;\n[11] (Notes) = notes on errors in data collection, where ‘NoDiscrepancy’ = no differences between field survey and camera survey species lists, ‘Inside5m’ = the species not identified (missed in the survey) was within 5 m of the plot centre and camera, ‘Outside5m’ = the species missed was more than 5m from the plot centre and camera, and ‘FieldError’ = the species was incorrectly recorded as absent in the field survey;\n[12]-[14] (Field_extra_Species_1, Field_extra_Species_2, Field_extra_Species_3) = names of extra species recorded in the field survey; [15] (In_camera_not_field) = number of species unique to camera survey; [16] (C_E_Species_1) = names of extra species recorded in the camera survey; [17] (Shared_species) = total number of shared species in field and camera survey lists; [18] (Unique_species) = total number of unique species in field and camera survey lists; [19] (Agreement) = Agreement (%), measured as 100 X ((shared species) / (shared + unique species));\n[20]-[51] (AcacAneu, AlloDeca, Triodiasp, AlutMais, GrevErio, AcacLigu, EucaGamo, DicrGile, AcacPrui, EremSpec, DodoVisc, AcacMell, CodoCoti, GyroTepp, AcacMiny, EucaOxy, NewcSpod, AcacMait, ExocSpar, HakeSpec, GrevSten, SanLanc, SennArte, GyroRamo GrevJunc, AcacAmmo, EremLatr, EremGlab, EremGibs, RhagErem, EremLong, Acacia_sp) species present in plots, with Both = species in both field and camera survey lists; CameraOnly = species found only in camera survey list; FieldOnly = species found only in field survey list; Absent = species not recorded in either field or camera survey data.\nThe species are: AcacAneu = Acacia aneura, AlloDeca = Allocasuarina decaisneana, Triodiasp = Triodia species (T. pungens, T. schinzii and T. basedowii), AlutMais = Aluta maisonneuvei, GrevErio = Grevillea eriostachya, AcacLigu = Acacia ligulata, EucaGamo = Eucalyptus gammophylla, DicrGile = Dicrastylis gilesii, AcacPrui = Acacia pruinocarpa, EremSpec = Eremophila sp., DodoVisc = Dodonaea viscosa, AcacMell = Acacia melliodora, CodoCoti = Codonocarpus cotinifolius, GyroTepp = Gyrostemon tepperi, AcacMiny = Acacia minyura, EucaOxy = Eucalyptus oxymitra, NewcSpod = Newcastelia spodiotricha, AcacMait = Acacia maitlandii, ExocSpar = Exocarpos sparteus, HakeSpec = Hakea species , GrevSten = Grevillea stenobotrya, SanLanc = Santalum lanceolatum, SennArte = Senna artemisiodes, GyroRamo = Gyrostemon ramulosum, GrevJunc = Grevillea juncifolia, AcacAmmo = Acacia ammobia , EremLatr = Eremophila latrobei, EremGlab = Eremophila glabra, EremGibs = Eremophila gibsonii , RhagErem = Rhagodia eremaea , EremLong = Eremophila longifolia, Acacia_sp = Acacia species.\n\n\nShow the code\nspecies_data &lt;- read_csv(\"./Data_files/validation_species.csv\", show_col_types = FALSE)\n\n# confirm that there are 79 plots of species data\ncat(\"The number of rows in the dataframe is: \", nrow(species_data))\n\n# initialize table counter\ntable_counter &lt;- 0\n\n# function to generate table numbers and captions\ntable_caption &lt;- function(caption) {\n  table_counter &lt;&lt;- table_counter + 1\n  paste(\"Table\", table_counter, \":\", caption)\n}\n\n# show the first 10 rows of the dataframe\n#kable(head(species_data, 10), format = \"html\", caption=\"Species calibration data frame\") \n\n\nThe number of rows in the dataframe is:  79\n\n\nWe begin by comparing the mean species number across plots using species lists compiled from field survey data and camera images scored in the pannotator package.\n\n\nShow the code\n# find the mean number of species in the field surveys\nField_mean &lt;- summary(species_data$No_Field_species)\ncat(\"The summary for the number of species based on field survey data is:\\n\")\nprint(Field_mean)\ncat(\"\\n\")\n\n# find the mean number of species in the camera surveys\nCamera_mean &lt;- summary(species_data$No_Camera_species)\ncat(\"The summary for the number of species based on camera image data is:\\n\")\nprint(Camera_mean)\ncat(\"\\n\")\n\n\nThe summary for the number of species based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   3.266   5.000   7.000 \n\nThe summary for the number of species based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   2.861   4.000   6.000 \n\n\nThe data show that on average we recorded 3.3 species per plot based on field surveys and 2.9 species based on camera images. Thus, there was a weak tendency to record fewer species using camera images. Now we determine the relationship between plot-level species counts in the field survey versus camera survey counts.\n\n\nShow the code\n# abline adds a linear model to the plot.\nplot_sp_richness &lt;- plot(species_data$No_Field_species, species_data$No_Camera_species,\n                         main = \"Plot-level species richness\",\n                         xlab = \"No. of species (Field Survey)\",\n                         ylab = \"No. of species (Camera Survey)\",\n                         pch = 16,  # Use filled circles as data points\n                         col = \"black\",  # Set point color \n                         ylim = c(0, 8),  # Set y-axis limits\n                         xlim = c(0, 8))  # Set x-axis limits\n                    abline(lm(No_Camera_species ~ No_Field_species, data = species_data), col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# create linear model for species data\nmodel &lt;- lm(No_Camera_species ~ No_Field_species, data = species_data)\ncat(\"Model results:\\n\")\nprint(model)\n\n# summarise linear model\nmodel_summary &lt;- summary(model)\ncat(\"Model summary:\\n\")\nprint(model_summary)\n\n\nModel results:\n\nCall:\nlm(formula = No_Camera_species ~ No_Field_species, data = species_data)\n\nCoefficients:\n     (Intercept)  No_Field_species  \n          0.4394            0.7414  \n\nModel summary:\n\nCall:\nlm(formula = No_Camera_species ~ No_Field_species, data = species_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.14654 -0.18080  0.07777  0.33633  1.33633 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.43936    0.14054   3.126   0.0025 ** \nNo_Field_species  0.74144    0.03885  19.087   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5374 on 77 degrees of freedom\nMultiple R-squared:  0.8255,    Adjusted R-squared:  0.8233 \nF-statistic: 364.3 on 1 and 77 DF,  p-value: &lt; 2.2e-16\n\n\nThere is a strong positive relationship between species counts in plots based on field survey and camera survey data which explains 82.3 % of the variation in the data (p &lt; 6.3825904^{-31}). The slope (0.74) again indicates a weak tendency for species lists compiled using camera imagery to be smaller than those based on field survey data.\nNow we assess the percentage agreement in the species lists based on field survey and camera survey data. The percentage agreement (A) is measured as A = 100 X ((shared species) / (shared + unique species)).\n\n\nShow the code\nMean_agreement = summary(species_data$Agreement)\ncat(\"The summary for % agreement between field & camera survey species lists is:\\n\")\nprint(Mean_agreement)\n\n# construct a histogram of the % agreement between mean plot-level species counts based on field and camera surveys\nhist_data &lt;- hist(species_data$Agreement, breaks = seq(0, 100, by = 5),\n                  main = \"Histogram of Field-Camera survey agreement\",\n                  xlab = \"Percent agreement\",\n                  ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for % agreement between field & camera survey species lists is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  25.00   66.67  100.00   83.75  100.00  100.00 \n\n\nOn average there was 84% agreement between field survey and camera survey species lists. The histogram shows that a majority of plots were in 100% agreement, with a second cluster at 65-90% agreement. A small number of plots had lower agreement.\nWe now investigate which species were contributing to the lack of agreement in species lists in certain plots. First we construct a list of the species that were missed in the camera surveys of each plot (i.e., were found only in the field survey), with the number of occasions of each. There are three columns of species found only in the field survey, labelled Field_extra_Species_1, Field_extra_Species_2, and Field_extra_Species_3. Next we construct a list of the species that were recorded ONLY in the camera surveys of each plot (i.e., were not recorded in the field survey), with counts of each. There is one column of species found only in the camera survey, labelled C_E_Species_1.\n\n\nShow the code\n# summarise results for each of the field extra species columns\nsummary_1 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_1)) %&gt;%\n             count(Field_extra_Species_1, sort = TRUE) %&gt;%\n             rename(Species = Field_extra_Species_1) %&gt;%\n             mutate(Species = as.character(Species))\n\nsummary_2 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_2)) %&gt;%\n             count(Field_extra_Species_2, sort = TRUE) %&gt;% \n             rename(Species = Field_extra_Species_2) %&gt;%\n             mutate(Species = as.character(Species))\n\nsummary_3 &lt;- species_data %&gt;%\n             filter(!is.na(Field_extra_Species_3)) %&gt;%\n             count(Field_extra_Species_3, sort = TRUE) %&gt;%\n             rename(Species = Field_extra_Species_3) %&gt;%\n             mutate(Species = as.character(Species))\n\nfield_only_species &lt;- bind_rows(summary_1, summary_2, summary_3) %&gt;%\n                      group_by(Species) %&gt;%\n                      summarise(n = sum(n)) %&gt;%\n                      arrange(desc(n))\n\n\n# print table using gt\nfield_only_species_gt_table &lt;- gt(field_only_species) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20),\n    quarto.use_bootstrap = TRUE\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Extra species in field surveys\")\n  )\n\nfield_only_species_gt_table\n\n\n\n\n\n\n\n\nTable 1 : Extra species in field surveys\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n11\n\n\nAcacia_ligulata\n4\n\n\nAluta_maisonneuvei\n3\n\n\nAcacia_melliodora\n2\n\n\nAcacia_minyura\n2\n\n\nEremophila_glabra\n2\n\n\nEremophila_latrobei\n2\n\n\nEremophila_longifolia\n2\n\n\nGrevillea_juncifolia\n2\n\n\nAcacia sp.\n1\n\n\nAcacia_maitlandii\n1\n\n\nCodonocarpus_cotinifolius\n1\n\n\nDodonea_viscosa\n1\n\n\nEucalyptus_oxymitra\n1\n\n\nGrevillea_eriostachya\n1\n\n\nGrevillea_stenobotrys\n1\n\n\nHakea_?_lorea\n1\n\n\nRhagodia_eremaea\n1\n\n\nSantalum_lanceolatum\n1\n\n\nSenna_artemisiodes\n1\n\n\n\n\n\n\n\n\n\nShow the code\n# summarise results for each of the species recorded in camera images only\ncamera_only_species &lt;- species_data %&gt;%\n                       filter(!is.na(C_E_Species_1))  %&gt;%\n                       count(C_E_Species_1, sort = TRUE) %&gt;%\n                       rename(Species = 1) %&gt;%\n                       mutate(Species = as.character(Species))\n\ncamera_only_species_gt_table &lt;- gt(camera_only_species) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20),\n    quarto.use_bootstrap = TRUE\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Extra species in camera surveys\")\n  )\n\ncamera_only_species_gt_table\n\n\n\n\n\n\n\n\nTable 2 : Extra species in camera surveys\n\n\nSpecies\nn\n\n\n\n\nAluta_maisonneuvei\n4\n\n\nAcacia_aneura\n3\n\n\nTriodia_sp.\n3\n\n\nAcacia_maitlandii\n1\n\n\nGrevillea_eriostachya\n1\n\n\nNewcastelia_spodiotricha\n1\n\n\n\n\n\n\n\nThese data show that the most common species identified only in the field survey of a given plot was Triodia schinzii, a spinifex grass. In many plots Triodia pungens and Triodia schinzii were both present, but it was not generally possible to distinguish these taxa, the difference of which can usually only be determined by panicle or floral structure. Acacia ligulata and Aluta maisonneuvei were also missed in the camera surveys 4 and 3 times respectively, but these were often in burnt plots. Other species, usually shrubs, were occasionally missed.\nWe now determine some circumstances under which species were not recorded in the two surveys. For this we have the variable species_data$Notes, which has the categories ‘NoDiscrepancy’ = the field and camera survey lists were the same, ‘Outside5m’ = detected in field survey 5 m to 10 m from the plot centre but not in the camera survey, ‘Inside5m’ = detected in field survey within 5 m of the plot centre but not in the camera survey, and ‘FieldError’ where an error was made in the field survey.\n\n\nShow the code\n# count occurrences in 'Notes' column and sort the results\ndf &lt;- species_data %&gt;%\n      count(Notes, sort = TRUE)\n\n# calculate the total number of records\ntotal &lt;- sum(df$n)\n\n# calculate the total number of discrepancies in plots species lists\n# need to filter by specific Notes values corresponding to discrepancies\ndisc &lt;- df %&gt;%\n        filter(Notes %in% c(\"Inside5m\", \"Outside5m\", \"FieldError\")) %&gt;%\n        summarise(total_discrepancies = sum(n)) %&gt;%\n        pull(total_discrepancies)\n\n# calculate the percentage of discrepancies\npcnt_disc &lt;- 100 * (disc / total)\n\n# print the percentage of discrepancies\ncat(paste(\"Percentage of discrepancies:\", round(pcnt_disc, 1), \"%\"))\ncat(\"\\n\")\n\ndf_gt_table &lt;- gt(df) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Discrepancies between field & camera surveys\")\n  )\n\ndf_gt_table\n\n\nPercentage of discrepancies: 45.6 %\n\n\n\n\n\n\n\n\nTable 3 : Discrepancies between field & camera surveys\n\n\nNotes\nn\n\n\n\n\nNoDiscrepancy\n43\n\n\nOutside5m\n22\n\n\nInside5m\n11\n\n\nFieldError\n3\n\n\n\n\n\n\n\nThese data show that there was discrepancy in species lists generate from field and camera surveys in 46% of plots (in 36 of 79 plots), and that in 22 plots (28%) at least one species located more than 5 m from the centre of the plot was missed in the camera survey. In 11 plots (14%) a species was missed in the camera survey when it occurred less than 5 m from the centre of the plot.\nWe now determine which species were missed &lt; 5 m and &gt; 5 m from the plot centre. Those missed &lt; 5 m from the plot centre are the most serious because they fall within the area used to determine species counts in subsequent camera-based surveys (see accompanying paper).\n\n\nShow the code\n# Filtering species_data for notes \"Inside5m\" and removing rows with NA's in Field_extra_Species_1 and Field_extra_Species_2\nspecies_data_L5 &lt;- species_data %&gt;%\n                   filter(Notes == \"Inside5m\") %&gt;%\n                   filter(complete.cases(Field_extra_Species_1))\n\n# Get the species counts for Field_extra_Species_1\nsummary_1_L5 &lt;- species_data_L5 %&gt;%\n                count(Field_extra_Species_1, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_1) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Get the species counts for Field_extra_Species_2\nsummary_2_L5 &lt;- species_data_L5 %&gt;%\n                filter(!is.na(Field_extra_Species_2)) %&gt;%\n                count(Field_extra_Species_2, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_2) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Combine the counts from both columns\nLess5_summary &lt;- bind_rows(summary_1_L5, summary_2_L5) %&gt;%\n                 group_by(Species) %&gt;%\n                 summarise(n = sum(n)) %&gt;%\n                 arrange(desc(n))\n\n\nLess5_summary_gt_table &lt;- gt(Less5_summary) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(title = table_caption(\"Species missed inside 5 metres\"))\n\nLess5_summary_gt_table\n\n# get the total count of missed Triodia schinzii &lt; 5 m from the plot center\nTriodia_index &lt;- which(Less5_summary$Species == \"Triodia_schinzii\")\nTriodia_count &lt;- Less5_summary$n[Triodia_index]\n\n# using `summarize` to calculate the total count from Less5_summary\nTotal_count &lt;- Less5_summary %&gt;%\n               summarize(total = sum(n)) %&gt;%\n               pull(total)\n\n# calculate the percentage of Triodia schinzii\nTriodia_pcnt &lt;- round(100 * (Triodia_count/Total_count),1)\ncat(paste(\"Missed Triodia schinzii (&lt; 5 m) as % of total: \", Triodia_pcnt, \"%\"))\ncat(\"\\n\")\n\n\n\n\n\n\n\n\nTable 4 : Species missed inside 5 metres\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n7\n\n\nAcacia_ligulata\n1\n\n\nAcacia_melliodora\n1\n\n\nEremophila_glabra\n1\n\n\nEucalyptus_oxymitra\n1\n\n\nRhagodia_eremaea\n1\n\n\n\n\n\n\n\nMissed Triodia schinzii (&lt; 5 m) as % of total:  58.3 %\n\n\nNow do the same for species greater than 5 m\n\n\nShow the code\n# Filtering species_data for notes \"Outside5m\" and removing rows with NA's in Field_extra_Species_1 and Field_extra_Species_2\nspecies_data_Gr5 &lt;- species_data %&gt;%\n                   filter(Notes == \"Outside5m\") %&gt;%\n                   filter(complete.cases(Field_extra_Species_1))\n\n# Get the species counts for Field_extra_Species_1\nsummary_1_Gr5 &lt;- species_data_Gr5 %&gt;%\n                count(Field_extra_Species_1, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_1) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Get the species counts for Field_extra_Species_2\nsummary_2_Gr5 &lt;- species_data_Gr5 %&gt;%\n                filter(!is.na(Field_extra_Species_2)) %&gt;%\n                count(Field_extra_Species_2, sort = TRUE) %&gt;%\n                rename(Species = Field_extra_Species_2) %&gt;%\n                mutate(Species = as.character(Species))\n\n# Combine the counts from both columns\nGr5_summary &lt;- bind_rows(summary_1_Gr5, summary_2_Gr5) %&gt;%\n                 group_by(Species) %&gt;%\n                 summarise(n = sum(n)) %&gt;%\n                 arrange(desc(n))\n\nGr5_summary_gt_table &lt;- gt(Gr5_summary) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Species missed outside 5 metres\")\n  )\n\nGr5_summary_gt_table\n\n\n\n\n\n\n\n\nTable 5 : Species missed outside 5 metres\n\n\nSpecies\nn\n\n\n\n\nTriodia_schinzii\n4\n\n\nAluta_maisonneuvei\n3\n\n\nAcacia_ligulata\n2\n\n\nAcacia_minyura\n2\n\n\nEremophila_latrobei\n2\n\n\nEremophila_longifolia\n2\n\n\nAcacia sp.\n1\n\n\nAcacia_maitlandii\n1\n\n\nAcacia_melliodora\n1\n\n\nCodonocarpus_cotinifolius\n1\n\n\nDodonea_viscosa\n1\n\n\nEremophila_glabra\n1\n\n\nGrevillea_eriostachya\n1\n\n\nGrevillea_juncifolia\n1\n\n\nGrevillea_stenobotrys\n1\n\n\nHakea_?_lorea\n1\n\n\nSantalum_lanceolatum\n1\n\n\nSenna_artemisiodes\n1\n\n\n\n\n\n\n\nFor species missed within 5 m of the plot centre, 7/12 cases 58.3% were of Triodia schinzii (which could not be distinguished easily from Triodia pungens, especially when sterile). Other species were only missed once. A much greater number of species were missed 5 m to 10 m from the plot centre, most being small shrubs or seedlings, burnt plants that retained no leaf material, or species that are morphologically similar to others in the study area (e.g., Triodia schinzii , Acacia minyura, various Eremophila spp.). Collectively these data suggest that given the resolution of GoPro Max cameras shrubby and smaller species should be recorded within 5 m of the plot centre unless they are morphologically or chromatically distinct (e.g., Allocasuarina descaisneana, Corymbia opaca).\nThe main species recorded in the camera survey but not in the field (within individual plots) included Aluta maisonneuvei, Acacia aneura, and Triodia sp. (spinifex grasses). Acacia aneura is morphologically similar to Acacia minyura, and burnt Aluta maisonneuvei could be mistaken for other shrub species. However, some field survey errors also occurred, particularly where Tridodia spp. were overlooked.\nWe now complete this analysis by determining the field detection rate of plant species recorded across all study plots, later focusing only on widespread species recorded in at least ten plots. For the following analysis we now select only the record ID (plot) and record of each definitively identified species (including the 3 Triodia spp. species lumped) in a plot, where ‘Both’ = species recorded in both field and camera survey lists; ‘CameraOnly’ = species recorded only in camera survey list; ‘FieldOnly’ = species recorded only in field survey list; ‘Absent’ = species not recorded in either field or camera survey data.\n\n\nShow the code\n# take a subset of the species_data\ndataB &lt;- species_data[, c(\"ID\", \"AcacAneu\", \"AlloDeca\", \"Triodiasp\", \"AlutMais\", \"GrevErio\", \"AcacLigu\", \"EucaGamo\", \"DicrGile\", \"AcacPrui\", \"CodoCoti\", \"DodoVisc\", \"GyroTepp\", \"AcacMell\", \"AcacMiny\", \"EucaOxy\", \"NewcSpod\",\"AcacMait\",\"ExocSpar\", \"GrevSten\", \"SanLanc\", \"GrevJunc\", \"SennArte\", \"GyroRamo\", \"AcacAmmo\", \"EremLatr\", \"EremGlab\", \"RhagErem\", \"EremLong\")]\n\n# some data wrangling to produce a pivot table for each species based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\ndataC &lt;- dataB %&gt;%\n         pivot_longer(cols = -ID) %&gt;%\n         count(name, value) %&gt;%\n         pivot_wider(names_from = name, values_from = n, values_fill = list(n = 0))\n\n# transpose the table\nt_dataC &lt;- t(dataC)\n\n#get row and colnames in order\ncolnames(t_dataC) &lt;- rownames(dataC)\nrownames(t_dataC) &lt;- colnames(dataC)\n\n#View(t_dataC)\n# assign the names\ncolnames(t_dataC) &lt;- t_dataC[1, ]\nt_dataC2 &lt;- t_dataC[-1,]\n\n# convert to data frame and add row names as a column\nspecies_counts &lt;- as.data.frame(t_dataC2) %&gt;%\n                  rownames_to_column(var = \"Species\")\n\n#View(species_counts)\n\nspecies_counts_gt_table &lt;- gt(species_counts) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Species counts based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\")\n  )\n\nspecies_counts_gt_table\n\n\n\n\n\n\n\n\nTable 6 : Species counts based on numbers of 'Both', 'CameraOnly', 'FieldOnly', and 'Absent' identifications in each plot\n\n\nSpecies\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nAcacAmmo\n77\n2\n0\n0\n\n\nAcacAneu\n50\n26\n3\n0\n\n\nAcacLigu\n68\n7\n0\n4\n\n\nAcacMait\n75\n2\n1\n1\n\n\nAcacMell\n77\n0\n0\n2\n\n\nAcacMiny\n73\n5\n0\n1\n\n\nAcacPrui\n78\n1\n0\n0\n\n\nAlloDeca\n59\n20\n0\n0\n\n\nAlutMais\n52\n20\n4\n3\n\n\nCodoCoti\n66\n12\n0\n1\n\n\nDicrGile\n78\n1\n0\n0\n\n\nDodoVisc\n76\n2\n0\n1\n\n\nEremGlab\n77\n0\n0\n2\n\n\nEremLatr\n75\n2\n0\n2\n\n\nEremLong\n77\n2\n0\n0\n\n\nEucaGamo\n71\n8\n0\n0\n\n\nEucaOxy\n76\n2\n0\n1\n\n\nExocSpar\n78\n1\n0\n0\n\n\nGrevErio\n59\n18\n1\n1\n\n\nGrevJunc\n77\n0\n0\n2\n\n\nGrevSten\n76\n2\n0\n1\n\n\nGyroRamo\n78\n1\n0\n0\n\n\nGyroTepp\n77\n2\n0\n0\n\n\nNewcSpod\n75\n3\n1\n0\n\n\nRhagErem\n78\n0\n0\n1\n\n\nSanLanc\n78\n0\n0\n1\n\n\nSennArte\n77\n1\n0\n1\n\n\nTriodiasp\n11\n65\n3\n0\n\n\n\n\n\n\n\nThis provides a list of each species and counts of occurrences in Both, CameraOnly, FieldOnly and Absent categories. We now calculate the camera detection rate for each species based on these data.\n\n\nShow the code\n# first ensure/convert the data to numeric\nspecies_counts$Absent &lt;- as.numeric(as.character(species_counts$Absent))\nspecies_counts$Both &lt;- as.numeric(as.character(species_counts$Both))\nspecies_counts$FieldOnly &lt;- as.numeric(as.character(species_counts$FieldOnly))\nspecies_counts$CameraOnly &lt;- as.numeric(as.character(species_counts$CameraOnly))\n\n\n# next calculate the total and number of valid, positive records of each species, which we assume here are counts that occur in either field surveys or both field surveys and camera surveys (the 'Both' category)\nspecies_counts$Positives &lt;- species_counts$Both +  species_counts$FieldOnly\nspecies_counts$Total &lt;- species_counts$Absent + species_counts$Both +  species_counts$FieldOnly + species_counts$CameraOnly \n\n\n# rank the species by total positive count\nspecies_counts&lt;-species_counts[order(species_counts$Positives,decreasing = TRUE),]\n\n# calcuate the frequency of each species as a percentage occurrence across plots\nspecies_counts$Frequency &lt;- 100*(species_counts$Positives / species_counts$Total)\n\n\n# calculate the percentage of positive occurrences that were captured in the camera survey for each species #\nspecies_counts$CameraDetectionRate &lt;- 100-100*(species_counts$FieldOnly / species_counts$Positives)\n\n\n# reorder the columns for ease of viewing and present the data\nspecies_counts &lt;- species_counts %&gt;%\n                     select(Species, Total, Positives, \n                            Frequency, CameraDetectionRate, \n                            Absent, Both, \n                            CameraOnly, FieldOnly)\n\n\n\nspecies_counts_gt_table &lt;- gt(species_counts) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Counts all species\")\n  ) \n\n\nspecies_counts_gt_table\n\n\n\n\n\n\n\n\nTable 7 : Counts all species\n\n\nSpecies\nTotal\nPositives\nFrequency\nCameraDetectionRate\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nTriodiasp\n79\n65\n82.278481\n100.00000\n11\n65\n3\n0\n\n\nAcacAneu\n79\n26\n32.911392\n100.00000\n50\n26\n3\n0\n\n\nAlutMais\n79\n23\n29.113924\n86.95652\n52\n20\n4\n3\n\n\nAlloDeca\n79\n20\n25.316456\n100.00000\n59\n20\n0\n0\n\n\nGrevErio\n79\n19\n24.050633\n94.73684\n59\n18\n1\n1\n\n\nCodoCoti\n79\n13\n16.455696\n92.30769\n66\n12\n0\n1\n\n\nAcacLigu\n79\n11\n13.924051\n63.63636\n68\n7\n0\n4\n\n\nEucaGamo\n79\n8\n10.126582\n100.00000\n71\n8\n0\n0\n\n\nAcacMiny\n79\n6\n7.594937\n83.33333\n73\n5\n0\n1\n\n\nEremLatr\n79\n4\n5.063291\n50.00000\n75\n2\n0\n2\n\n\nAcacMait\n79\n3\n3.797468\n66.66667\n75\n2\n1\n1\n\n\nDodoVisc\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nEucaOxy\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nGrevSten\n79\n3\n3.797468\n66.66667\n76\n2\n0\n1\n\n\nNewcSpod\n79\n3\n3.797468\n100.00000\n75\n3\n1\n0\n\n\nAcacAmmo\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nAcacMell\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nEremGlab\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nEremLong\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nGrevJunc\n79\n2\n2.531646\n0.00000\n77\n0\n0\n2\n\n\nGyroTepp\n79\n2\n2.531646\n100.00000\n77\n2\n0\n0\n\n\nSennArte\n79\n2\n2.531646\n50.00000\n77\n1\n0\n1\n\n\nAcacPrui\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nDicrGile\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nExocSpar\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nGyroRamo\n79\n1\n1.265823\n100.00000\n78\n1\n0\n0\n\n\nRhagErem\n79\n1\n1.265823\n0.00000\n78\n0\n0\n1\n\n\nSanLanc\n79\n1\n1.265823\n0.00000\n78\n0\n0\n1\n\n\n\n\n\n\n\nNow find species with more than 10 positive records and present them\n\n\nShow the code\n# filter species with more than 10 positive records and present them\nspecies_counts_gr_10 &lt;- species_counts %&gt;%\n                        filter(Positives &gt; 10) %&gt;%\n                        arrange(desc(Positives)) \n\ncounts_gr_10_gt_table &lt;- gt(species_counts_gr_10) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Counts of species in &gt; 10 plots\")\n  )\n\ncounts_gr_10_gt_table\n\n# get the minimum camera detection rate for the first 6 species detected in more than 10 plots\nmin10 &lt;- species_counts_gr_10 %&gt;%\n         slice(1:6) %&gt;%  # Select the first 6 rows\n         summarise(MinCameraDetectionRate = min(CameraDetectionRate, na.rm = TRUE))\n\n#cat(paste0(\"Minimum Camera Detection Rate: \", round(min10, 2)))\n#cat(\"\\n\")\n\n# get the minimum camera detection rate for Acacia ligulata, a species most frequently undetected; for the text below\nAcacLigu_index &lt;- which(species_counts_gr_10$Species == \"AcacLigu\")\nAcli &lt;- min(species_counts_gr_10$CameraDetectionRate[AcacLigu_index])\n\n#cat(paste0(\"Acacia ligulata: \", round(Acli, 2)))\n#cat(\"\\n\")\n\n\n\n\n\n\n\n\nTable 8 : Counts of species in &gt; 10 plots\n\n\nSpecies\nTotal\nPositives\nFrequency\nCameraDetectionRate\nAbsent\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\nTriodiasp\n79\n65\n82.27848\n100.00000\n11\n65\n3\n0\n\n\nAcacAneu\n79\n26\n32.91139\n100.00000\n50\n26\n3\n0\n\n\nAlutMais\n79\n23\n29.11392\n86.95652\n52\n20\n4\n3\n\n\nAlloDeca\n79\n20\n25.31646\n100.00000\n59\n20\n0\n0\n\n\nGrevErio\n79\n19\n24.05063\n94.73684\n59\n18\n1\n1\n\n\nCodoCoti\n79\n13\n16.45570\n92.30769\n66\n12\n0\n1\n\n\nAcacLigu\n79\n11\n13.92405\n63.63636\n68\n7\n0\n4\n\n\n\n\n\n\n\nThe objective of this analysis was to determine which species are most easily detected using camera images taken 3.2 m above the ground and in the centre of a 20 m diameter plot. The results show that species differed considerably in camera detectability, with the camera detection rate ranging from 0% to 100% depending on the species. Among common, widespread species or species groups (&gt; 10 positive records or occurrences), Allocasuarina decaisneana, Acacia aneura, the Triodia species group (T. basedowii, T. schinzii, T. pungens), Aluta maisonneuvei, Codonocarpus continifolius, and Grevillea eriostachya were all detected in camera images 87% of the time or more. Only Acacia ligulata, many of which were dead across the study area, was an exception (64%).\nAmong less common species, morphologically distinct species such as Eucalyptus gamophylla and Newcastelia spodiotricha were always successfuly detected, and many other species were a majority of the time.\n\n\nOverall, plot-level species occurrence data were reliably extracted from camera images in this study. There was a strong relationship between species counts based on field survey and camera survey, albeit with a weak tendency for fewer species to be recorded in the camera survey. On average there was 84% agreement between field survey and camera survey species lists, although we note that the overall species diversity in the study area was relatively low, and apart from the large spinifex grasses (Triodia spp.) we did not focus on herbaceous species.\nThe most common species identified in the field survey but missed in the camera survey was Triodia schinzii, and it was not generally possible to distinguish between Triodia schinzii and Triodia pungens, even less than 5 m from the centre of the plot (i.e., where the photo was taken). However, this is true even under field conditions when plants are lacking floral structures. More species, particularly small taxa, seedlings and plants that retained no leaf material or species that co-occured with morphologically similar taxa were sometimes missed 5 m to 10 m from the plot centre. Overall, however, the most common species or species groups all had a camera detection rate of at least 86.96%, as did some less common taxa. Occasionally species were recorded in the camera survey but not the field survey, and since all species were perennial, these cases may be classified as field errors.\n\n\n\nCamera data can be accurately used to generate plot-level species lists at the study site, although fewer species are missed within 5 m of the plot centre. Common and widespread species were all successfully detectable,\nMorphologically distinct species were most easily detectable, and at greater distances from the camera. Morphologically similar species (e.g., spinifex grasses, Eremophila spp.) may need to be lumped together for subsequent analyses,\nReference photographs, ideally taken at different distances from the camera, should be provided for all target species to assist with species identification using the pannotator package,\nThe resolution of the current GoPro Max model may require collection of images closer to certain target taxa. This may involve, for example, collecting images closer to the ground (understory species), in the canopy (morphologically similar canopy taxa), and at multiple levels in both (structurally complex vegetation)."
  },
  {
    "objectID": "pannotator_data_validation.html#spinifex-grass-triodia-spp.-cover-and-dieback-data",
    "href": "pannotator_data_validation.html#spinifex-grass-triodia-spp.-cover-and-dieback-data",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "The objective of the following analyses is to investigate the relationship between cover and mortality (dieback) estimates of spinifex (Triodia spp.) grasses across the validation plots in which cover and dieback estimates were generated both by field surveys and by using the pannotator package to score 360-degree images. We are particularly interested in specific size classes (if any) where discrepancies arise, and alterations to scoring methods that might improve accuracy if camera detection methods.\nWe first import the dataset spinifex_validation.csv and create the spinifex_data dataframe. The dataframe contains the following variables:\nColumn [1] (ID) = record identifier; [2] (Plot_NEW) = plot number; [3] (Location) = location of plot along transect (NE, NW, SE, SW corner or extra plot); [4] (Latitude) = latitude in decimal degrees; [5] (Longitude) = longitude in decimal degrees; [6] (Closest_image) = identity of closest 360-degree image (for pannotator annotation);\n[7] (Field_Spinifex_size) = size class of spinifex identified in field survey (classes = 0-30 cm, &gt;30-60, &gt;60-100, &gt;100-200, &gt;200-300, &gt;300-400, &gt;400-500, &gt;500 cm); [8] (Field_Spinifex_Cover) = field estimated cover (%); [9] (Field_Spinifex_%dead) = field percentage of spinifex cover estimate as dead; [10] (Camera_Spinifex_size) = size class of spinifex identified in camera survey; [11] (Camera_Spinifex_Cover) = camera estimated cover (%); [12] (Camera_Spinifex_%dead) = camera percentage of spinifex cover estimate as dead;\n[13] (Cover_Cam_Field_Diff) = difference in cover estimate based on camera cover (%) - field cover (%); [14] (PercDead_Cam_Field_Diff) = difference in percentage of dead cover based on camera_%dead - field_%dead; [15] (Size_classes_field) = number of distinct spinifex size classes observed in plot based on field data; [16] (Size_classes_camera) = number of distinct spinifex size classes observed in plot based on cameradata; [17] (Misclassifications) = number of size classes in a given plot present in both field and camera surveys but differing by one or more size classes; [18] (Missed_classes) = number of size classes in a given plot missed completely in either in field and camera surveys; [19] (ErrorType1) = Error Type 1: ‘Both’ - size class observed in both field and camera surveys, ‘FieldOnly’ - size class observed only in field survey, CameraOnly’ - size class observed only in camera survey; [20] (ErrorType2) = Error Type 2: ‘No Error’ - size class classified the same on field and camera suveys, ‘Misclassed’ - size class misclassified in either field or camera suveys, ‘FieldError’ - error made on field estimate of size class, ‘CameraError’ - error made on camera estimate of size class; [21] (Cat1) = misclassified by one size class category; [22] (Distance) = distance from camera for error : ‘Less5’ - less than 5 m, ‘Great5’ - more than 5 m.\n\n\nShow the code\n# read in the data file. This is the data for species and cover calibration\nspinifex_data &lt;- read_csv(\"./Data_files/spinifex_validation.csv\", show_col_types = FALSE)\n\n\nIn this section we take a similar approach to the evaluation of species identification described above. First we focus on overall plot cover and mortality data. These data are rows with the value of ‘Total’ in the Field_Spinifex_size and Camera_Spinifex_size columns.\n\n\nShow the code\n# subset the data on only those containing \"Total\" plot cover values\nspinifex_plot_total &lt;- spinifex_data[spinifex_data$Field_Spinifex_size == 'TOTAL',]\n\n# confirm the number of plots of spinifex cover data and print the result\ncat(\"The number of rows in the subsetted dataframe is: \", nrow(spinifex_plot_total), \"\\n\")\n\n\nThe number of rows in the subsetted dataframe is:  73 \n\n\nWe will begin by comparing estimates of mean field- and camera-based spinifex cover (the mean across all verification plots), and then the relationship between field- and camera-based spinifex cover.\n\n\nShow the code\n# first ensure the data are numeric \nspinifex_plot_total$Field_Spinifex_Cover &lt;- as.numeric(as.character(spinifex_plot_total$Field_Spinifex_Cover))\nspinifex_plot_total$Camera_Spinifex_Cover &lt;- as.numeric(as.character(spinifex_plot_total$Camera_Spinifex_Cover))\n\n# calculate the mean plot-level spinifex cover using field and camera survey data and print the results\nField_mean_sp &lt;- summary(spinifex_plot_total$Field_Spinifex_Cover)\ncat(\"The summary for mean total spinifex cover across plots based on field survey data is:\\n\")\nprint(Field_mean_sp)\ncat(\"\\n\")\n\nCamera_mean_sp &lt;- summary(spinifex_plot_total$Camera_Spinifex_Cover)\ncat(\"The summary for mean total spinifex cover across plots based on camera image data is:\\n\")\nprint(Camera_mean_sp)\ncat(\"\\n\")\n\n\nThe summary for mean total spinifex cover across plots based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    3.50   13.00   13.15   17.00   46.00 \n\nThe summary for mean total spinifex cover across plots based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    4.50   14.50   14.63   22.50   46.00 \n\n\nField survey and camera survey methods yielded similar mean (13.15% versus 14.63% respectively), maximum and minimum estimates of total plot cover across the entire data set (n = 73 plots). This indicates that overall bias in the two measurement techniques might be small, but it does not mean that predictability at the plot scale is also high. To assess whether field and camera survey techniques yield similar cover estimates at the plot scale we must look further at this relationship. We begin by looking at the correlation between plot-level estimates of total spinifex cover using both techniques (spinifex_plot_total$Field_Spinifex_Cover and spinifex_plot_total$Camera_Spinifex_Cover).\n\n\nShow the code\n# plot the correlation between field cover and camera cover estimates with linear model \nplot(spinifex_plot_total$Field_Spinifex_Cover, spinifex_plot_total$Camera_Spinifex_Cover,\n     main = \"Spinifex cover, field vs camera, linear model\",\n     xlab = \"Total spinifex cover (Field Survey)\",\n     ylab = \"Total spinifex cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 60),  # Set y-axis limits\n     xlim = c(0, 60))  # Set x-axis limits\nabline(lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total), col = \"red\") # add a linear model to the plot\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the linear model statistics\nlinearmodel &lt;- lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, \n                  data=spinifex_plot_total)\n\n# test whether the slope estimate differs from 1, which might indicate a bias towards lower values of camera cover for a given value of field cover\n\n# 1. Get the summary of the model\nmodelsummary &lt;- summary(linearmodel)\ncat(\"Linear model summary of Camera_Spinifex_Cover ~ Field_Spinifex_Cover \\n\")\nprint(modelsummary)\n\n# 2. Get the standard error of the slope\nslope_se &lt;- coef(modelsummary)[\"Field_Spinifex_Cover\", \"Std. Error\"]\ncat(paste0(\"Slope of the standard error: \", slope_se, \"\\n\"))\n\n# 3. Get the slope estimate\nslope_estimate &lt;- coef(modelsummary)[\"Field_Spinifex_Cover\", \"Estimate\"]\ncat(paste0(\"Slope estimater: \", slope_estimate, \"\\n\"))\n\n# 4. Calculate the Z test statistic (how many standard errors away from 1 is the slope estimate)\ntest_statistic &lt;- (slope_estimate - 1) / slope_se\ncat(paste0(\"Z score of the slope estimate: \", test_statistic, \"\\n\"))\n\n# 5. Calculate the p-value for the two-sided test\np_value &lt;- 2 * (1 - pnorm(abs(test_statistic)))\n\n# 6. Print the p-value\ncat(paste0(\"The P value for testing deviation in the slope from 1 is: \", p_value, \"\\n\"))\n\n\nLinear model summary of Camera_Spinifex_Cover ~ Field_Spinifex_Cover \n\nCall:\nlm(formula = Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.915  -3.307  -1.695   3.013  22.555 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           3.30680    1.22624   2.697  0.00874 ** \nField_Spinifex_Cover  0.86105    0.07105  12.119  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.786 on 71 degrees of freedom\nMultiple R-squared:  0.6741,    Adjusted R-squared:  0.6695 \nF-statistic: 146.9 on 1 and 71 DF,  p-value: &lt; 2.2e-16\n\nSlope of the standard error: 0.0710465545046707\nSlope estimater: 0.861045180580407\nZ score of the slope estimate: -1.95582770182694\nThe P value for testing deviation in the slope from 1 is: 0.0504854544045341\n\n\nBoth indicate that field survey cover is strongly related (p &lt; 5.8946282^{-19}) to camera survey cover. The linear model explains 67% of variability in the data, and the test for whether the slope of the relationship (0.86) differs from 1 is marginally significant (p = 0.05), which in this model indicates that camera cover scores may be slightly biased towards lower values than field survey estimates. Visually, however, the relationship appears to be non-linear, with stronger bias at higher values of field survey cover. Next we do a very simple investigation of this possible bias using a second-order polynomial function.\n\n\nShow the code\n# generate a simple second-order polynomial to capture the possible decrease in camera cover estimate at higher values of field cover estimate\npoly2model &lt;- lm(Camera_Spinifex_Cover ~ Field_Spinifex_Cover + I(Field_Spinifex_Cover^2), data = spinifex_plot_total)\n\n# generate a sequence of values spanning the range of Field_Spinifex_Cover\nnewdata &lt;- data.frame(Field_Spinifex_Cover = seq(min(spinifex_plot_total$Field_Spinifex_Cover), max(spinifex_plot_total$Field_Spinifex_Cover), length.out = 100))\n\n# use the model to predict Camera_Spinifex_Cover for these values\nnewdata$Camera_Spinifex_Cover &lt;- predict(poly2model, newdata)\n\n# plot the predictions\nplot(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = spinifex_plot_total,\n     main = \"Spinifex cover, field vs camera, polynomial model\",\n     xlab = \"Total spinifex cover (Field Survey)\",\n     ylab = \"Total spinifex cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 60),  # Set y-axis limits\n     xlim = c(0, 60))  # Set x-axis limits)\nlines(Camera_Spinifex_Cover ~ Field_Spinifex_Cover, data = newdata, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the second order polynomial model statistics\na2 &lt;- summary(poly2model)\ncat(\"Summary of polynomial model: \\n\")\nprint(a2)\ncat(\"\\n\")\n\n# calculate AIC for both models\naicl &lt;- aic_linearmodel &lt;- AIC(linearmodel)\naicp &lt;- aic_poly2model &lt;- AIC(poly2model)\n\n# print the AIC values\ncat(paste0(\"AIC for linearmodel: \", aic_linearmodel, \"\\n\"))\ncat(paste0(\"AIC for poly2model: \", aic_poly2model, \"\\n\"))\n\n# get the model adjusted R squared\nR2 &lt;- a2$adj.r.squared\n\ncat(\"The model adjusted R^2 is: \", R2, \"\\n\")\n\n\nSummary of polynomial model: \n\nCall:\nlm(formula = Camera_Spinifex_Cover ~ Field_Spinifex_Cover + I(Field_Spinifex_Cover^2), \n    data = spinifex_plot_total)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.8427  -3.3427  -0.5873   2.2686  20.3047 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                0.587326   1.414317   0.415  0.67921    \nField_Spinifex_Cover       1.410770   0.179514   7.859 3.32e-11 ***\nI(Field_Spinifex_Cover^2) -0.015139   0.004591  -3.297  0.00154 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.358 on 70 degrees of freedom\nMultiple R-squared:  0.7179,    Adjusted R-squared:  0.7099 \nF-statistic: 89.09 on 2 and 70 DF,  p-value: &lt; 2.2e-16\n\n\nAIC for linearmodel: 490.696986792716\nAIC for poly2model: 482.157066085602\nThe model adjusted R^2 is:  0.7098859 \n\n\nThe second order parameter explains a significant proportion of the data (p = 0.0015353) and the model adjusted R2 is slightly higher than the linear model (0.71). The lower AIC criterion for the polynomial model (490.7 vs. 482.16) also suggests that it provides a better fit to the relationship between field and camera cover estimates. Evaluation of the graphical relationship suggests that any bias towards lower camera cover scores occurs at field survey cover estimates of &gt;30%, which is only a small minority of plots.\nWe now consider more closely the magnitude of differences in plot-level estimates of spinifex cover based on field survey and camera survey methods. The variable of interest is spinifex_plot_total$Cover_Cam_Field_Diff which is the difference in total cover between the camera cover estimate (TCcam) and the field cover estimate (TCfield); ie. Cover_Cam_Field_Diff = TCcam - TCfield (the two variables being spinifex_plot_total$Camera_Spinifex_Cover and spinifex_plot_total$Field_Spinifex_Cover).\n\n\nShow the code\n# determine the mean difference in plot level field and camera cover estimates\na &lt;- summary(spinifex_plot_total$Cover_Cam_Field_Diff)\ncat(\"The summary for mean cover difference based on all data is:\\n\")\nprint(a)\ncat(\"\\n\")\n\n# create the histogram:\nhist_data_all &lt;- hist(spinifex_plot_total$Cover_Cam_Field_Diff,\n                      breaks = seq(-50, 50, by = 5),\n                      main = \"Histogram of cover estimate differences\",\n                      xlab = \"Cover difference %\",\n                      ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for mean cover difference based on all data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-19.000  -1.000   0.000   1.479   4.000  23.500 \n\n\n\n\nShow the code\n# determine the difference for only plots that contain Triodia (i.e., excluding plots with zero spinifex cover in both field and camera surveys)\nspinifex_plot_total_gr0 &lt;- subset(spinifex_plot_total, Field_Spinifex_Cover &gt; 0 | Camera_Spinifex_Cover &gt; 0)\n\nb &lt;- summary(spinifex_plot_total_gr0$Cover_Cam_Field_Diff)\ncat(\"The summary for mean cover difference based on only plots containing spinifex is:\\n\")\nprint(b)\ncat(\"\\n\")\n\n# create the histogram\nhist_data_gr0 &lt;- hist(spinifex_plot_total_gr0$Cover_Cam_Field_Diff,\n                      breaks = seq(-50, 50, by = 5),\n                      main = \"Histogram of cover estimate differences \\n(plots containing spinifex)\",\n                      xlab = \"Cover difference %\",\n                      ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe summary for mean cover difference based on only plots containing spinifex is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-19.000  -1.500   0.000   1.742   5.375  23.500 \n\n\nThe data confirm that differences in total spinifex cover estimates based on field survey and camera survey data are tightly clustered near a mean of zero and an approximately normal distribution. Differences can be as large as 20% but the majority are in the range of -10% to +10%.\nWe must now also consider differences in the percentage of spinifex cover that is dead (suffering recent mortality/dieback). Here we provide an abbreviated analysis based on key results.\n\n\nShow the code\nField_mean &lt;- summary(spinifex_plot_total$`Field_Spinifex_%dead`)\ncat(\"The summary for mortality (% dead cover) across all plots based on field survey data is:\\n\")\nprint(Field_mean)\ncat(\"\\n\")\n\nCamera_mean &lt;- summary(spinifex_plot_total$`Camera_Spinifex_%dead`)\ncat(\"The summary for mortality (% dead cover) across all plots based on camera image data is:\\n\")\nprint(Camera_mean)\ncat(\"\\n\")\n\n\nThe summary for mortality (% dead cover) across all plots based on field survey data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    0.10   10.14   25.64   47.44  100.00      11 \n\nThe summary for mortality (% dead cover) across all plots based on camera image data is:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   4.364  24.773  29.968  45.903 100.000      11 \n\n\nThe means and spread of data are similar.\n\n\nShow the code\n# plot the relationship between mortality (%dead) estimates from both field and camera surveys\nplot(spinifex_plot_total$`Field_Spinifex_%dead`, spinifex_plot_total$`Camera_Spinifex_%dead`,\n     main = \"Percent dead cover, field vs camera, linear model\",\n     xlab = \"Percent dead cover (Field Survey)\",\n     ylab = \"Percent dead cover (Camera Survey)\",\n     pch = 16,  # Use filled circles as data points\n     col = \"black\",  # Set point color \n     ylim = c(0, 100),  # Set y-axis limits\n     xlim = c(0, 100))  # Set x-axis limits\nabline(lm(`Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, data = spinifex_plot_total), col = \"red\") # add a linear model to the plot\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# view the linear model statistics\nlinearmodel &lt;- lm(`Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, data = spinifex_plot_total)\na3 &lt;- summary(linearmodel)\ncat(\"Summary of the linear model: Camera_Spinifex_%dead ~ Field_Spinifex_%dead \\n\")\nprint(a3)\ncat(\"\\n\")\n\n# print the  P value of the model\npvalue &lt;- a3$coefficients[2,4]\ncat(\"The P value of the model is: \", pvalue, \"\\n\")\n\n\nSummary of the linear model: Camera_Spinifex_%dead ~ Field_Spinifex_%dead \n\nCall:\nlm(formula = `Camera_Spinifex_%dead` ~ `Field_Spinifex_%dead`, \n    data = spinifex_plot_total)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.622 -10.594  -6.637   8.417  89.406 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            10.59406    3.18337   3.328   0.0015 ** \n`Field_Spinifex_%dead`  0.75574    0.08101   9.329 2.77e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 19 on 60 degrees of freedom\n  (11 observations deleted due to missingness)\nMultiple R-squared:  0.5919,    Adjusted R-squared:  0.5851 \nF-statistic: 87.03 on 1 and 60 DF,  p-value: 2.772e-13\n\n\nThe P value of the model is:  2.771671e-13 \n\n\nThe linear model is highly significant (p = 2.7716709^{-13})), and explains 59% of variation in the data. We now look at the spread in the data:\n\n\nShow the code\n# create the histogram\nhist_data &lt;- hist(spinifex_plot_total$PercDead_Cam_Field_Diff,\n                  breaks = seq(-100, 100, by = 10),\n                  main = \"Histogram of differences in mortality estimates\",\n                  xlab = \"Difference in estimated mortality (%)\",\n                  ylab = \"Frequency\")\n\n\n\n\n\n\n\n\n\nThe data are again centrally distributed with a mean near zero, but the spread in the data are larger than for live cover. The majority of errors are between -20% to +20%, but some estimates vary by up to ca. 50-60%.\n\n\n\nThe object of the following analyses is to investigate differences in classification among size classes within plots. First we consider differences in the mean number of size classes per plot based on the field and camera data, along with the number of misclassified size classes (one size class category differences) and missed classes (size classes present in either field or camera data but not both).\n\n\nShow the code\nSCField_mean &lt;- summary(spinifex_plot_total$Size_classes_field)\ncat(\"Summary - number of spinifex size classes per plot based on field survey data:\\n\")\nprint(SCField_mean)\ncat(\"\\n\")\n\nSCCamera_mean &lt;- summary(spinifex_plot_total$Size_classes_camera)\ncat(\"Summary - number of spinifex size classes per plot based on camera survey data:\\n\")\nprint(SCCamera_mean)\ncat(\"\\n\")\n\nSCMisclass_mean &lt;- summary(spinifex_plot_total$Misclassifications)\ncat(\"Summary - spinifex size class misclassifications per plot:\\n\")\nprint(SCMisclass_mean)\ncat(\"\\n\")\n\nSCMissed_class_mean &lt;- summary(spinifex_plot_total$Missed_classes)\ncat(\"Summary - number of spinifex size classes missed per plot in either survey:\\n\")\nprint(SCMissed_class_mean)\ncat(\"\\n\")\n\n\nSummary - number of spinifex size classes per plot based on field survey data:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   1.000   2.000   1.958   3.000   5.000       1 \n\nSummary - number of spinifex size classes per plot based on camera survey data:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   1.000   2.000   2.083   3.000   5.000       1 \n\nSummary - spinifex size class misclassifications per plot:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3226  1.0000  2.0000      11 \n\nSummary - number of spinifex size classes missed per plot in either survey:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3226  1.0000  2.0000      11 \n\n\nOverall, the mean number of spinifex size classes per plot recorded in field (1.96) and camera (2.08) data were very similar, and the mean number of misclassifications (0.32) and missed size class categories (0.32) were both very low.\nWe now generate a new dataframe that contains cover and mortality data for all size classes in each plot, removing plot totals. We then determine the number of occasions in which a given spinifex size class was observed in both field and camera data (Both), or in only field (FieldOnly) or camera (CameraOnly) data.\n\n\nShow the code\n# Count occurrences of each ErrorType1 for non-TOTAL Field_Spinifex_size\nsize_class_data &lt;- spinifex_data %&gt;%\n                   filter(Field_Spinifex_size != \"TOTAL\", \n                          ErrorType1 %in% c(\"Both\", \"CameraOnly\", \"FieldOnly\")) %&gt;%\n                   count(ErrorType1, sort = TRUE)\n\n#View(size_class_data)\n\nsize_class_data_gt_table &lt;- gt(size_class_data) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data\")\n  )\n\nsize_class_data_gt_table\n\n# Calculate total counts and percentages for each error type\ncounttotal &lt;- sum(size_class_data$n)\npcnt_both &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"Both\"] / counttotal),2)\npcnt_camera &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"CameraOnly\"] / counttotal),2)\npcnt_field &lt;- round(100 * (size_class_data$n[size_class_data$ErrorType1 == \"FieldOnly\"] / counttotal),2)\n\n#print(paste0(\"Percent in both: \", pcnt_both))\n#print(paste0(\"Percent in camera: \", pcnt_camera))\n#print(paste0(\"Percent in field: \", pcnt_field))\n\n\n\n\n\n\n\n\nTable 9 : Spinifex size class data\n\n\nErrorType1\nn\n\n\n\n\nBoth\n123\n\n\nCameraOnly\n30\n\n\nFieldOnly\n22\n\n\n\n\n\n\n\nThe data show that 70.3% of spinifex size classes were recorded in both Camera and Field surveys, while 29.7% occurred only in one survey. Of these, more were recorded only in the camera survey (n = 30) than in the field survey (n = 22).\nWe now look at how these differences are distributed through spinifex size classes. In this study we used the following size classes: 0-30 cm, &gt;30-60, &gt;60-100, &gt;100-200, &gt;200-300,&gt;300-400, &gt;400-500, &gt;500cm.\n\n\nShow the code\n# first reorder the size classes from smallest to largest\nlevels_order &lt;- c(\"0-30\", \"&gt;30-60\", \"&gt;60-100\", \"&gt;100-200\", \"&gt;200-300\", \"&gt;300-400\" , \"&gt;400-500\", \"&gt;500\")\n\n# convert Field_Spinifex_size to a factor and specify the order of the levels \nspinifex_data$Camera_Spinifex_size &lt;- factor(spinifex_data$Camera_Spinifex_size, levels = levels_order)\n\n# display the data\ncross_matrix &lt;- as.data.frame.matrix(table(spinifex_data$Camera_Spinifex_size, spinifex_data$ErrorType1)) %&gt;%\n  rownames_to_column(var = \"Size class\") %&gt;%\n  arrange(factor(`Size class`, levels = levels_order))\n\ngt_table &lt;- gt(cross_matrix) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data & error type 1\")\n  )\n\ngt_table\n\n\n\n\n\n\n\n\nTable 10 : Spinifex size class data & error type 1\n\n\nSize class\nBoth\nCameraOnly\nFieldOnly\n\n\n\n\n0-30\n32\n9\n2\n\n\n&gt;30-60\n34\n4\n5\n\n\n&gt;60-100\n30\n8\n1\n\n\n&gt;100-200\n18\n3\n8\n\n\n&gt;200-300\n9\n3\n5\n\n\n&gt;300-400\n0\n1\n0\n\n\n&gt;400-500\n0\n2\n0\n\n\n&gt;500\n0\n0\n1\n\n\n\n\n\n\n\nThere appears to be a tendency for smaller size classes to be recorded solely on camera images and the largest size classes to be recorded only in the field surveys.\nWe then attempted to determine, by comparing field notes and camera data, where these discrepancies occurred. Here, errors were classified according to: Camera error: the size class was present but definitely missed in the camera survey, Field error: the size class was present but definitely missed in the field survey, or Misclassified : the size class was seen in both but allocated to different size classes.\n\n\nShow the code\n# Define the order of levels\nlevels_order &lt;- c(\"0-30\", \"&gt;30-60\", \"&gt;60-100\", \"&gt;100-200\", \"&gt;200-300\", \"&gt;300-400\", \"&gt;400-500\", \"&gt;500\")\n\n# Ensure the Field_Spinifex_size column is a factor with the specified order\nspinifex_data$Field_Spinifex_size &lt;- factor(spinifex_data$Field_Spinifex_size, levels = levels_order)\n\n# Create the cross matrix and order it according to levels_order\ncross_matrix2 &lt;- as.data.frame.matrix(table(spinifex_data$Field_Spinifex_size, spinifex_data$ErrorType2)) %&gt;%\n  rownames_to_column(var = \"Size class\") %&gt;%\n  arrange(factor(`Size class`, levels = levels_order))\n\n\n# generate the cross matrix table\ncross_matrix2 &lt;- as.data.frame.matrix(table(spinifex_data$Field_Spinifex_size, spinifex_data$ErrorType2)) %&gt;%\n  rownames_to_column(var = \"Size class\")\n\n\nsize_class_gt_table &lt;- gt(cross_matrix2) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Spinifex size class data & error type 2\")\n  )\n\nsize_class_gt_table\n\n# Count the number of different error types and do not sort them\nError2_summary &lt;- spinifex_data %&gt;%\n                   count(ErrorType2, sort = TRUE)\n\n# #Extract counts by category name\nCamerror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"CameraError\")]\nFielderror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"FieldError\")]\nMiserror &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"Misclassed\")]\nNo_error &lt;- Error2_summary$n[which(Error2_summary$ErrorType2 == \"No Error\")]\nTotal &lt;- sum(Error2_summary$n)\n\n# Optionally, you can print the counts for verification\n# cat(\"Camera Errors: \", Camerror, \"\\n\")\n# cat(\"Field Errors: \", Fielderror, \"\\n\")\n# cat(\"Misclassified: \", Miserror, \"\\n\")\n# cat(\"No Errors: \", No_error, \"\\n\")\n# cat(\"Total: \", Total, \"\\n\")\n\n\n\n\n\n\n\n\nTable 11 : Spinifex size class data & error type 2\n\n\nSize class\nCameraError\nFieldError\nMisclassed\nNo Error\n\n\n\n\n0-30\n2\n6\n3\n32\n\n\n&gt;30-60\n4\n3\n2\n34\n\n\n&gt;60-100\n0\n3\n6\n30\n\n\n&gt;100-200\n3\n1\n7\n18\n\n\n&gt;200-300\n2\n1\n5\n9\n\n\n&gt;300-400\n0\n0\n1\n0\n\n\n&gt;400-500\n0\n1\n1\n0\n\n\n&gt;500\n0\n0\n1\n0\n\n\n\n\n\n\n\nThe validation data show that specific size classes were missed in either the camera survey (4 % of cases) or the field survey (6 % of cases), which indicates that camera surveys were actually more reliable in some circumstances than field surveys. In another 26 cases (10 %) size classes were simply misclassified by one size class category.\n\n\n\nOverall, analysis of the validation data set suggests that spinifex cover and mortality data extracted from 360-degree images performs well when compared with data collected during field surveys. This was true even given the large size of the plots (20 m diameter) and the fact that only one image was taken in the centre of each plot. Over a large sample of plots the mean plot-level cover and mortality rate (percentage of dead material) using both techniques were very similar and had errors that were approximately normally distributed with a mean of near zero, indicating minimal bias using camera images for data collection. Generally, plot-level cover estimates varied by ~ +10% to -10%, and percentage mortality estimates by ~ +20% to -20%, although differences in a small minority of plots were larger. On average, the mean number of spinifex size classes per plot was extremely similar based in field data and camera data, and far in excess of the number of misclassified or missed size classes.\nAt the plot level, we used a fine-grained cover size scale (8 classes), particularly for tussocks &lt;1m across (0-30 cm, &gt;30-60 cm, and &gt;60-100cm). Despite this, 70% of size classes were correctly identified in both camera and field survey data. A further 9% were only identified in camera data, due to field errors in data collection, thus ~80% of size classes were correctly identified using camera surveys. The remaining discrepancies were due to size class estimates developed using camera and field survey techniques differing by a single size class. There was a weak tendency for smaller size classes to be recorded solely in camera images and the largest size classes to be recorded only in the field surveys.\nCollectively, we draw four conclusions from these data:\n1) Mean cover and percent mortality estimates for spinifex grasses across plots based on camera images were very similar to those based on field survey data, and there was no directional biases in cover and dieback differences. Therefore, for large samples, mean estimates for both parameters using camera images are likely to be accurate.\n2) At the within-plot level, camera and field survey approaches yielded similar numbers of size classes per plot, and, overall, the number of size classes misclassified or missed completely was small. Overall, about 80% of specific size classes identified using camera surveys were either verified by field data or were correct when field data were incorrect. About 6% of size classes were definitely due to errors in data collected from 360-degree images. Thus, camera surveys generate data at least, or possibly slightly better than, field surveys based on visual cover and dieback estimates.\n3) These data and the obvious relationship between the size classes of spinifex present in a given area and fire history (see accompanying paper) indicate that 360-degree images are a reliable source of cover and dieback data. However, the discrepancies among size class data estimates indicate that there is still room for improvement. Therefore, for the transect study reported in the accompanying paper we decide to undertake the following changes:\na) reduce the size of the study plot from 20 m to 10 m diameter, where camera images are most useful,\nb) overlay plot boundaries and cover estimate markers onto 360-degree images, and\nc) develop help files that contain images in which cover and dieback estimates were determined with a very high degree of accuracy using the ImageJ software package.\nUltimately, at the 10 m diameter scale spinifex cover and dieback estimates are likely to be as good or better than those developed using standard visual field survey estimates. We recommend that all studies collect similar verification data, and carefully consider optimal camera positioning for different taxa and ecological situations. Calibration or validation studies may benefit from even more intensive field survey techniques, for example line intercept or point-based sampling. Ultimately, however, it is our belief that cover or dieback estimates generated using imaging software (such as ImageJ), while time-consuming to collect without automation, will ultimately be far more accurate than those generated using even more intensive field survey estimates."
  },
  {
    "objectID": "pannotator_data_validation.html#desert-oak-crown-health",
    "href": "pannotator_data_validation.html#desert-oak-crown-health",
    "title": "validation of 360-degree camera data",
    "section": "",
    "text": "The objective of the following analyses is to investigate variation in crown health and size class data for desert oak (Allocasuarina decaisneana) extracted from camera images by three different scorers using the pannotator package. Inter-observer variability is a problem in many scientific disciplines and our intention was to determine the scoring protocols and help files that minimise these differences.\nHere we compare three scorers: 1) one present at the time when images were collected in cameras and is familiar with the study site and associated vegetation (scorer 1), 2) two with no experience at the study site or in scoring crown health (scorers 2-3). Scorer 1 had access to a rudimentary help file (fewer images), a less refined size class scoring system (no seedling size class), and a single worked example for calculating the crown health score. All camera images were collected from the 4 km-long transect that forms the basis of the study reported in this accompanying paper.\nWe first import the required datasets: scorer_oak_1.csv, scorer_oak_2.csv, and scorer_oak_3.csv.\nEach dataframe contains the following variables:\nColumn [1] (user) = scorer number; [2] (timestamp) = image timestamp, [3] (leaflet_id) = leaflet ID; [4] (imagefile) = related image file name; [5] (feature_type) = feature type (marker or image marker); [6] (radius) = radius geometry (not applicable); [7] (geometry) = geometry in Well-Known Text (WKT) format; [8] (species) = species name & size/impact class as per dropdown menu; [9] (Size_class) = Size class (seedling, juvenile, early pole, late pole, early mature, mature); [10] (veg_layer) = vegetation level, here Allocasuarina decaisneana = tree; [11-13] (dd1-dd3) = crown health estimate components; [14] (plot) = image plot; [15] (plot_name_new) = plot names assigned in study ; [16] (frame) = frame of video image file was taken from.\n\n\n\n\nShow the code\n# read in the annotation files\nscorer_1 &lt;- read.csv(\"./Data_files/scorer_oak_1.csv\")\nscorer_2 &lt;- read.csv(\"./Data_files/scorer_oak_2.csv\")\nscorer_3 &lt;- read.csv(\"./Data_files/scorer_oak_3.csv\")\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_1 &lt;- st_as_sf(scorer_1, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_1, width = \"100%\", na.rm = TRUE)\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_2 &lt;- st_as_sf(scorer_2, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_2, width = \"100%\", na.rm = TRUE)\n\n\n\n\n\n\n\nShow the code\n# set the geometry\nscorer_3 &lt;- st_as_sf(scorer_3, wkt = \"geometry\", crs = 4326)\n\n#mapview(scorer_3, width = \"100%\", na.rm = TRUE)\n\n\nThese maps confirm that data for each of the scorers was collected from the same transect at Uluru-Kata Tjuta NP.\n\n\n\nCrown health is simply defined as Crown Health Score = dd1 x dd2 x dd3; values range from 100 (perfect health) to 0 (dead). Here dd1 = the assessable crown (AC, as a percentage of the potential crown that contains live or dead tertiary branches or smaller), dd2 = the crown extent (CE, which is the percentage of the assessable crown that contains leaves), and dd3 = the crown density (CD; the percentage of skylight blocked by leaves within the crown extent). AC, CE and CD were assigned percentages using the scale SHC= 0, &gt;0-5, &gt;5-20, &gt;20-35, &gt;35-50, &gt;50-65, &gt;65-80, &gt;80-95, &gt;95-&lt;100, 100%, and scale midpoints used for calculations. Further details and examples are provided in the accompanying paper and Supporting Information 6).\n\n\nShow the code\n# replace all -999 values (used to signify NA) with zero. The calculation works since when dd2 or dd3 contain -999 the previous dd variable is necessarily zero.\nscorer_1$dd3 &lt;- replace(scorer_1$dd3, scorer_1$dd3 == -999, 0)\nscorer_2$dd3 &lt;- replace(scorer_2$dd3, scorer_2$dd3 == -999, 0)\nscorer_3$dd3 &lt;- replace(scorer_3$dd3, scorer_3$dd3 == -999, 0)\n\nscorer_1$dd2 &lt;- replace(scorer_1$dd2, scorer_1$dd2 == -999, 0)\nscorer_2$dd2 &lt;- replace(scorer_2$dd2, scorer_2$dd2 == -999, 0)\nscorer_3$dd2 &lt;- replace(scorer_3$dd2, scorer_3$dd2 == -999, 0)\n\n# develop a function to calculate Crown health scores in each dataframe and then reorder the size classes. Reordering the size classes is necessary for creating plots below\ncalculate_scores &lt;- function(df) {\n  df$Crown_score &lt;- df$dd1/100 * df$dd2/100 * df$dd3/100\n  df$Size_class_Reorder &lt;- factor(df$Size_class, c(\"Seedling\", \"Juvenile\", \"Early_Pole\", \"Late_Pole\", \"Early_Mature\", \"Mature\"))\n  return(df)\n}\n\n# use above function on scorer_1, scorer_2 and scorer_3\nscorer_1 &lt;- calculate_scores(scorer_1)\nscorer_2 &lt;- calculate_scores(scorer_2)\nscorer_3 &lt;- calculate_scores(scorer_3)\n\n\nNow we can compare mean crown health scores across different scorers.\n\n\nShow the code\n# function to calculate mean crown scores in each size class\nmean_and_count_table &lt;- function(data, score_col, size_col, scorer_name) {\n  mean_table &lt;- data %&gt;%\n    group_by(!!sym(size_col)) %&gt;%\n    summarize(\n      mean = mean(!!sym(score_col), na.rm = TRUE),\n      count = n()\n    ) %&gt;%\n    mutate(Scorer = scorer_name) %&gt;%\n    rename(Category = !!sym(size_col))\n  \n  return(mean_table)\n}\n\n\ntable_scorer_1 &lt;- mean_and_count_table(scorer_1, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 1\")\n\n#View(table_scorer_1)\n\ntable_scorer_2 &lt;- mean_and_count_table(scorer_2, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 2\")\n\n#View(table_scorer_2)\n\ntable_scorer_3 &lt;- mean_and_count_table(scorer_3, \"Crown_score\", \"Size_class_Reorder\", \"Scorer 3\")\n\n#View(table_scorer_3a)\n\ncombined_table &lt;- rbind(table_scorer_1, table_scorer_2, table_scorer_3)\n\n#View(combined_table)\n\nreshaped_table &lt;- combined_table %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove the sf geometry\n  gather(key = \"Statistic\", value = \"Value\", -Category, -Scorer) %&gt;%\n  unite(\"Scorer_Statistic\", Scorer, Statistic, sep = \"_\") %&gt;%\n  spread(key = \"Scorer_Statistic\", value = \"Value\")\n\n# Print the reshaped table using gt\n\nscorers_gt_table &lt;- gt(reshaped_table) %&gt;%\n  tab_options(\n    table.align = \"center\",\n    table.font.size = px(10),\n    column_labels.font.size = px(16),\n    heading.align = \"center\",\n    heading.title.font.size = px(20)\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  tab_header(\n    title = table_caption(\"Crown scores from different scorers\")\n  )\n\nscorers_gt_table\n\n# we also get the mean crown health score for each scorer\ns1mean &lt;- summary(scorer_1$Crown_score)\n#print(s1mean)\ns2mean &lt;- summary(scorer_2$Crown_score)\n#print(s2mean)\ns3mean &lt;- summary(scorer_3$Crown_score)\n#print(s3mean)\n\n\n\n\n\n\n\n\nTable 12 : Crown scores from different scorers\n\n\nCategory\nScorer 1_count\nScorer 1_mean\nScorer 2_count\nScorer 2_mean\nScorer 3_count\nScorer 3_mean\n\n\n\n\nSeedling\nNA\nNA\n4\n0.2437500\n2\n0.3625000\n\n\nJuvenile\n9\n0.6034549\n19\n0.3264803\n26\n0.5147356\n\n\nEarly_Pole\n7\n0.5332500\n16\n0.6268896\n13\n0.6940385\n\n\nLate_Pole\n4\n0.5954453\n35\n0.5449272\n25\n0.6838250\n\n\nEarly_Mature\n25\n0.5206769\n52\n0.4669056\n38\n0.6420189\n\n\nMature\n51\n0.4164403\n20\n0.5977703\n31\n0.6274970\n\n\n\n\n\n\n\nThese data indicate that crown health scores were similar for scorers 1 (0.477) and 2 (0.497) but about 0.1 units higher for scorer 3 (0.623), mainly due to a lack of low-scoring trees. Scores for pole- and mature-sized trees were generally consistent across the three scorers, although again scores provided by scorer 3 tended to be higher than those provided by the other scorers. Scores differed in seedling and juvenile classes, although the number of individuals used to determine these scores varied significantly. Data provided by scorer 1 indicated that smaller seedlings (&lt;1 m tall) needed to be separated from juveniles (1- 4 m tall), and that a greater range of visual examples of all size classes was required in the help files. Incorporation of these changes greatly improved the agreement across size classes by scorers 2 and 3.\nNow we want to determine whether the spatial structure of size class and crown health data differed significantly among scorers. Maps are visualised using mapview and images saved using the ‘mapshot’ function.\n\n\n\n\n\nShow the code\nscorer_1 &lt;- st_as_sf(scorer_1, wkt = \"geometry\",crs = 4326)\n\ns1_p &lt;- mapview(scorer_1, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE, basemaps = c(\"Esri.WorldImagery\"))\n\n#print(s1_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns1_q &lt;- mapview(scorer_1, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s1_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_1, scorer_1$Size_class == \"Mature\" | scorer_1$Size_class == \"Early_Mature\")\n\ns1_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s1_z)\n\n\n\n\n\n\n\nShow the code\nscorer_2 &lt;- st_as_sf(scorer_2, wkt = \"geometry\",crs = 4326)\n\ns2_p &lt;- mapview(scorer_2, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE)\n\n#print(s2_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns2_q &lt;- mapview(scorer_2, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s2_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_2, scorer_2$Size_class == \"Mature\" | scorer_2$Size_class == \"Early_Mature\")\n\ns2_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s2_z)\n\n\n\n\n\n\n\nShow the code\ns3_p &lt;- mapview(scorer_3, zcol = \"Size_class_Reorder\", cex = 8, alpha = 0.9, alpha.regions = 0.9, layer.name = \"Size_class\", col.regions = c(\"green4\", \"green4\",\"yellow\", \"yellow\", \"red4\", \"red4\"),na.rm = TRUE)\n\n#print(s3_p)\n\nmapviewOptions(basemaps = c(\"Esri.WorldImagery\"),\n               raster.palette = grey.colors,\n               vector.palette = colorRampPalette(c(\"red\", \"yellow\", \"green2\")),\n               na.color = \"gray\",\n               layers.control.pos = \"topright\")\n\ns3_q &lt;- mapview(scorer_3, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE, legend = TRUE, at = seq(0, 1, 0.1))\n\n#print(s3_q)\n\n# map crown scores of mature and early_mature trees\nMature &lt;- subset(scorer_3, scorer_3$Size_class == \"Mature\" | scorer_3$Size_class == \"Early_Mature\")\n\ns3_z &lt;- mapview(Mature, zcol = \"Crown_score\", layer.name = \"Crown_score\", cex = 8, alpha = 0.9, alpha.regions = 0.9, na.rm = TRUE)\n\n#print(s3_z)\n\n\n\n\n\nNow we can compare the scorers side by side. First size classes:\n\n\nShow the code\n# Synchronize map views in html version\n# sync(s1_p@map %&gt;%\n#     addControl(html = \"Scorer 1\", position = \"bottomright\"),\n#     s2_p@map %&gt;%\n#     addControl(html = \"Scorer 2\", position = \"bottomright\"),\n#     s3_p@map %&gt;%\n#     addControl(html = \"Scorer 3\", position = \"bottomright\"))\n\n\nNow crown scores:\n\n\nShow the code\n# sync(s1_q@map %&gt;%\n#     addControl(html = \"Scorer 1\", position = \"bottomright\"),\n#     s2_q@map %&gt;%\n#     addControl(html = \"Scorer 2\", position = \"bottomright\"),\n#     s3_q@map %&gt;%\n#     addControl(html = \"Scorer 3\", position = \"bottomright\"))\n\n\nNow mature only:\n\n\nShow the code\n# sync(s1_z@map %&gt;%\n#     addControl(html = \"Scorer 1 - Mature\", position = \"bottomright\"),\n#     s2_z@map %&gt;%\n#     addControl(html = \"Scorer 2 - Mature\", position = \"bottomright\"),\n#     s3_z@map %&gt;%\n#     addControl(html = \"Scorer 3 - Mature\", position = \"bottomright\"))\n\n\nFor convenience maps for size class and crown score have been compiled into single .png file:\nComparison of desert oak size class and crown health scores for 3 scorers. Examples of areas recently burnt (Burnt) and not recently burnt (Unburnt) are provided in the top left panel. In the top right panel F = areas apparently impacted severely by fire, D = areas not or minimally affected by fire, likely impact caused by drought.\n\n\n\n\nThe data presented here indicate that all scorers generally produced broadly similar mean crown scores across the whole transect (0.48-0.62) and across size classes. They also produced a comparable spatial distribution for these variables, with similar patches of low crown health identified by each of the scorers (right panels above). The majority of desert oaks with low crown health occurred in parts of the transect that had been recently burnt in hot fires, although there were a few isolated patches that may have been caused by drought (e.g., near the dunes in the north of the western transect; top right panel above). These results indicate that collection and analysis of 360-degree images can be a useful method for mapping differences in crown health and then using these data to infer the role of different drivers of crown health at small to large spatial scales.\nScoring consistency was improved by providing enhanced help material to identify different size classes, splitting smaller trees into ‘seedling’ and ‘juvenile’ size classes, and providing more representative images of the crown health scoring protocol (including the assessable crown (AC), the crown extent (CE), and the crown density (CD). Inter-scorer variation is a common problem in studies that rely on semi-quantitative or qualitative scales, and these would benefit from developing a set of scores by multiple scorers for a common set of images. The pannotator package makes this a simple process, as shown in this example."
  }
]